# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LocalShardInfo

    QdrantLocalShardInfo(;
        shard_id=nothing,
        shard_key=nothing,
        points_count=nothing,
        state=nothing,
    )

    - shard_id::Int64 : Local shard id
    - shard_key::QdrantShardKey
    - points_count::Int64 : Number of points in the shard
    - state::QdrantReplicaState
"""
Base.@kwdef mutable struct QdrantLocalShardInfo <: OpenAPI.APIModel
    shard_id::Union{Nothing, Int64} = nothing
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKey }
    points_count::Union{Nothing, Int64} = nothing
    state = nothing # spec type: Union{ Nothing, QdrantReplicaState }

    function QdrantLocalShardInfo(shard_id, shard_key, points_count, state, )
        OpenAPI.validate_property(QdrantLocalShardInfo, Symbol("shard_id"), shard_id)
        OpenAPI.validate_property(QdrantLocalShardInfo, Symbol("shard_key"), shard_key)
        OpenAPI.validate_property(QdrantLocalShardInfo, Symbol("points_count"), points_count)
        OpenAPI.validate_property(QdrantLocalShardInfo, Symbol("state"), state)
        return new(shard_id, shard_key, points_count, state, )
    end
end # type QdrantLocalShardInfo

const _property_types_QdrantLocalShardInfo = Dict{Symbol,String}(Symbol("shard_id")=>"Int64", Symbol("shard_key")=>"QdrantShardKey", Symbol("points_count")=>"Int64", Symbol("state")=>"QdrantReplicaState", )
OpenAPI.property_type(::Type{ QdrantLocalShardInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantLocalShardInfo[name]))}

function check_required(o::QdrantLocalShardInfo)
    o.shard_id === nothing && (return false)
    o.points_count === nothing && (return false)
    o.state === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantLocalShardInfo }, name::Symbol, val)
    if name === Symbol("shard_id")
        OpenAPI.validate_param(name, "QdrantLocalShardInfo", :format, val, "uint32")
    end
    if name === Symbol("shard_id")
        OpenAPI.validate_param(name, "QdrantLocalShardInfo", :minimum, val, 0, false)
    end
    if name === Symbol("points_count")
        OpenAPI.validate_param(name, "QdrantLocalShardInfo", :format, val, "uint")
    end
    if name === Symbol("points_count")
        OpenAPI.validate_param(name, "QdrantLocalShardInfo", :minimum, val, 0, false)
    end
end
