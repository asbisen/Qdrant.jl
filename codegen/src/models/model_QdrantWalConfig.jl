# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WalConfig

    QdrantWalConfig(;
        wal_capacity_mb=nothing,
        wal_segments_ahead=nothing,
    )

    - wal_capacity_mb::Int64 : Size of a single WAL segment in MB
    - wal_segments_ahead::Int64 : Number of WAL segments to create ahead of actually used ones
"""
Base.@kwdef mutable struct QdrantWalConfig <: OpenAPI.APIModel
    wal_capacity_mb::Union{Nothing, Int64} = nothing
    wal_segments_ahead::Union{Nothing, Int64} = nothing

    function QdrantWalConfig(wal_capacity_mb, wal_segments_ahead, )
        OpenAPI.validate_property(QdrantWalConfig, Symbol("wal_capacity_mb"), wal_capacity_mb)
        OpenAPI.validate_property(QdrantWalConfig, Symbol("wal_segments_ahead"), wal_segments_ahead)
        return new(wal_capacity_mb, wal_segments_ahead, )
    end
end # type QdrantWalConfig

const _property_types_QdrantWalConfig = Dict{Symbol,String}(Symbol("wal_capacity_mb")=>"Int64", Symbol("wal_segments_ahead")=>"Int64", )
OpenAPI.property_type(::Type{ QdrantWalConfig }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantWalConfig[name]))}

function check_required(o::QdrantWalConfig)
    o.wal_capacity_mb === nothing && (return false)
    o.wal_segments_ahead === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantWalConfig }, name::Symbol, val)
    if name === Symbol("wal_capacity_mb")
        OpenAPI.validate_param(name, "QdrantWalConfig", :format, val, "uint")
    end
    if name === Symbol("wal_capacity_mb")
        OpenAPI.validate_param(name, "QdrantWalConfig", :minimum, val, 1, false)
    end
    if name === Symbol("wal_segments_ahead")
        OpenAPI.validate_param(name, "QdrantWalConfig", :format, val, "uint")
    end
    if name === Symbol("wal_segments_ahead")
        OpenAPI.validate_param(name, "QdrantWalConfig", :minimum, val, 0, false)
    end
end
