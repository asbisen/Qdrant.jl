# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RaftInfo
Summary information about the current raft state

    QdrantRaftInfo(;
        term=nothing,
        commit=nothing,
        pending_operations=nothing,
        leader=nothing,
        role=nothing,
        is_voter=nothing,
    )

    - term::Int64 : Raft divides time into terms of arbitrary length, each beginning with an election. If a candidate wins the election, it remains the leader for the rest of the term. The term number increases monotonically. Each server stores the current term number which is also exchanged in every communication.
    - commit::Int64 : The index of the latest committed (finalized) operation that this peer is aware of.
    - pending_operations::Int64 : Number of consensus operations pending to be applied on this peer
    - leader::Int64 : Leader of the current term
    - role::QdrantStateRole
    - is_voter::Bool : Is this peer a voter or a learner
"""
Base.@kwdef mutable struct QdrantRaftInfo <: OpenAPI.APIModel
    term::Union{Nothing, Int64} = nothing
    commit::Union{Nothing, Int64} = nothing
    pending_operations::Union{Nothing, Int64} = nothing
    leader::Union{Nothing, Int64} = nothing
    role = nothing # spec type: Union{ Nothing, QdrantStateRole }
    is_voter::Union{Nothing, Bool} = nothing

    function QdrantRaftInfo(term, commit, pending_operations, leader, role, is_voter, )
        OpenAPI.validate_property(QdrantRaftInfo, Symbol("term"), term)
        OpenAPI.validate_property(QdrantRaftInfo, Symbol("commit"), commit)
        OpenAPI.validate_property(QdrantRaftInfo, Symbol("pending_operations"), pending_operations)
        OpenAPI.validate_property(QdrantRaftInfo, Symbol("leader"), leader)
        OpenAPI.validate_property(QdrantRaftInfo, Symbol("role"), role)
        OpenAPI.validate_property(QdrantRaftInfo, Symbol("is_voter"), is_voter)
        return new(term, commit, pending_operations, leader, role, is_voter, )
    end
end # type QdrantRaftInfo

const _property_types_QdrantRaftInfo = Dict{Symbol,String}(Symbol("term")=>"Int64", Symbol("commit")=>"Int64", Symbol("pending_operations")=>"Int64", Symbol("leader")=>"Int64", Symbol("role")=>"QdrantStateRole", Symbol("is_voter")=>"Bool", )
OpenAPI.property_type(::Type{ QdrantRaftInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantRaftInfo[name]))}

function check_required(o::QdrantRaftInfo)
    o.term === nothing && (return false)
    o.commit === nothing && (return false)
    o.pending_operations === nothing && (return false)
    o.is_voter === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantRaftInfo }, name::Symbol, val)
    if name === Symbol("term")
        OpenAPI.validate_param(name, "QdrantRaftInfo", :format, val, "uint64")
    end
    if name === Symbol("term")
        OpenAPI.validate_param(name, "QdrantRaftInfo", :minimum, val, 0, false)
    end
    if name === Symbol("commit")
        OpenAPI.validate_param(name, "QdrantRaftInfo", :format, val, "uint64")
    end
    if name === Symbol("commit")
        OpenAPI.validate_param(name, "QdrantRaftInfo", :minimum, val, 0, false)
    end
    if name === Symbol("pending_operations")
        OpenAPI.validate_param(name, "QdrantRaftInfo", :format, val, "uint")
    end
    if name === Symbol("pending_operations")
        OpenAPI.validate_param(name, "QdrantRaftInfo", :minimum, val, 0, false)
    end
    if name === Symbol("leader")
        OpenAPI.validate_param(name, "QdrantRaftInfo", :format, val, "uint64")
    end
    if name === Symbol("leader")
        OpenAPI.validate_param(name, "QdrantRaftInfo", :minimum, val, 0, false)
    end
end
