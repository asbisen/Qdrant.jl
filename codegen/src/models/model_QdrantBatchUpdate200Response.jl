# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""batch_update_200_response

    QdrantBatchUpdate200Response(;
        time=nothing,
        status=nothing,
        result=nothing,
    )

    - time::Float32 : Time spent to process this request
    - status::String
    - result::Vector{QdrantUpdateResult}
"""
Base.@kwdef mutable struct QdrantBatchUpdate200Response <: OpenAPI.APIModel
    time::Union{Nothing, Float32} = nothing
    status::Union{Nothing, String} = nothing
    result::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantUpdateResult} }

    function QdrantBatchUpdate200Response(time, status, result, )
        OpenAPI.validate_property(QdrantBatchUpdate200Response, Symbol("time"), time)
        OpenAPI.validate_property(QdrantBatchUpdate200Response, Symbol("status"), status)
        OpenAPI.validate_property(QdrantBatchUpdate200Response, Symbol("result"), result)
        return new(time, status, result, )
    end
end # type QdrantBatchUpdate200Response

const _property_types_QdrantBatchUpdate200Response = Dict{Symbol,String}(Symbol("time")=>"Float32", Symbol("status")=>"String", Symbol("result")=>"Vector{QdrantUpdateResult}", )
OpenAPI.property_type(::Type{ QdrantBatchUpdate200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantBatchUpdate200Response[name]))}

function check_required(o::QdrantBatchUpdate200Response)
    true
end

function OpenAPI.validate_property(::Type{ QdrantBatchUpdate200Response }, name::Symbol, val)
    if name === Symbol("time")
        OpenAPI.validate_param(name, "QdrantBatchUpdate200Response", :format, val, "float")
    end
end
