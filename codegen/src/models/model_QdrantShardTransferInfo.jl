# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ShardTransferInfo

    QdrantShardTransferInfo(;
        shard_id=nothing,
        from=nothing,
        to=nothing,
        sync=nothing,
        method=nothing,
    )

    - shard_id::Int64
    - from::Int64
    - to::Int64
    - sync::Bool : If &#x60;true&#x60; transfer is a synchronization of a replicas If &#x60;false&#x60; transfer is a moving of a shard from one peer to another
    - method::QdrantShardTransferMethod
"""
Base.@kwdef mutable struct QdrantShardTransferInfo <: OpenAPI.APIModel
    shard_id::Union{Nothing, Int64} = nothing
    from::Union{Nothing, Int64} = nothing
    to::Union{Nothing, Int64} = nothing
    sync::Union{Nothing, Bool} = nothing
    method = nothing # spec type: Union{ Nothing, QdrantShardTransferMethod }

    function QdrantShardTransferInfo(shard_id, from, to, sync, method, )
        OpenAPI.validate_property(QdrantShardTransferInfo, Symbol("shard_id"), shard_id)
        OpenAPI.validate_property(QdrantShardTransferInfo, Symbol("from"), from)
        OpenAPI.validate_property(QdrantShardTransferInfo, Symbol("to"), to)
        OpenAPI.validate_property(QdrantShardTransferInfo, Symbol("sync"), sync)
        OpenAPI.validate_property(QdrantShardTransferInfo, Symbol("method"), method)
        return new(shard_id, from, to, sync, method, )
    end
end # type QdrantShardTransferInfo

const _property_types_QdrantShardTransferInfo = Dict{Symbol,String}(Symbol("shard_id")=>"Int64", Symbol("from")=>"Int64", Symbol("to")=>"Int64", Symbol("sync")=>"Bool", Symbol("method")=>"QdrantShardTransferMethod", )
OpenAPI.property_type(::Type{ QdrantShardTransferInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantShardTransferInfo[name]))}

function check_required(o::QdrantShardTransferInfo)
    o.shard_id === nothing && (return false)
    o.from === nothing && (return false)
    o.to === nothing && (return false)
    o.sync === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantShardTransferInfo }, name::Symbol, val)
    if name === Symbol("shard_id")
        OpenAPI.validate_param(name, "QdrantShardTransferInfo", :format, val, "uint32")
    end
    if name === Symbol("shard_id")
        OpenAPI.validate_param(name, "QdrantShardTransferInfo", :minimum, val, 0, false)
    end
    if name === Symbol("from")
        OpenAPI.validate_param(name, "QdrantShardTransferInfo", :format, val, "uint64")
    end
    if name === Symbol("from")
        OpenAPI.validate_param(name, "QdrantShardTransferInfo", :minimum, val, 0, false)
    end
    if name === Symbol("to")
        OpenAPI.validate_param(name, "QdrantShardTransferInfo", :format, val, "uint64")
    end
    if name === Symbol("to")
        OpenAPI.validate_param(name, "QdrantShardTransferInfo", :minimum, val, 0, false)
    end
end
