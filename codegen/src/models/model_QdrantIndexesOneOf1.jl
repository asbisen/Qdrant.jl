# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Indexes_oneOf_1
Use filterable HNSW index for approximate search. Is very fast even on a very huge collections, but require additional space to store index and additional time to build it.

    QdrantIndexesOneOf1(;
        type=nothing,
        options=nothing,
    )

    - type::String
    - options::QdrantHnswConfig
"""
Base.@kwdef mutable struct QdrantIndexesOneOf1 <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    options = nothing # spec type: Union{ Nothing, QdrantHnswConfig }

    function QdrantIndexesOneOf1(type, options, )
        OpenAPI.validate_property(QdrantIndexesOneOf1, Symbol("type"), type)
        OpenAPI.validate_property(QdrantIndexesOneOf1, Symbol("options"), options)
        return new(type, options, )
    end
end # type QdrantIndexesOneOf1

const _property_types_QdrantIndexesOneOf1 = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("options")=>"QdrantHnswConfig", )
OpenAPI.property_type(::Type{ QdrantIndexesOneOf1 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantIndexesOneOf1[name]))}

function check_required(o::QdrantIndexesOneOf1)
    o.type === nothing && (return false)
    o.options === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantIndexesOneOf1 }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "QdrantIndexesOneOf1", :enum, val, ["hnsw"])
    end
end
