# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WithLookup

    QdrantWithLookup(;
        collection=nothing,
        with_payload=nothing,
        with_vectors=nothing,
    )

    - collection::String : Name of the collection to use for points lookup
    - with_payload::QdrantWithPayloadInterface
    - with_vectors::QdrantWithVector
"""
Base.@kwdef mutable struct QdrantWithLookup <: OpenAPI.APIModel
    collection::Union{Nothing, String} = nothing
    with_payload = nothing # spec type: Union{ Nothing, QdrantWithPayloadInterface }
    with_vectors = nothing # spec type: Union{ Nothing, QdrantWithVector }

    function QdrantWithLookup(collection, with_payload, with_vectors, )
        OpenAPI.validate_property(QdrantWithLookup, Symbol("collection"), collection)
        OpenAPI.validate_property(QdrantWithLookup, Symbol("with_payload"), with_payload)
        OpenAPI.validate_property(QdrantWithLookup, Symbol("with_vectors"), with_vectors)
        return new(collection, with_payload, with_vectors, )
    end
end # type QdrantWithLookup

const _property_types_QdrantWithLookup = Dict{Symbol,String}(Symbol("collection")=>"String", Symbol("with_payload")=>"QdrantWithPayloadInterface", Symbol("with_vectors")=>"QdrantWithVector", )
OpenAPI.property_type(::Type{ QdrantWithLookup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantWithLookup[name]))}

function check_required(o::QdrantWithLookup)
    o.collection === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantWithLookup }, name::Symbol, val)
end
