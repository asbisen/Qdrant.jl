# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Filter

    QdrantFilter(;
        should=nothing,
        min_should=nothing,
        must=nothing,
        must_not=nothing,
    )

    - should::QdrantFilterShould
    - min_should::QdrantMinShould
    - must::QdrantFilterMust
    - must_not::QdrantFilterMustNot
"""
Base.@kwdef mutable struct QdrantFilter <: OpenAPI.APIModel
    should = nothing # spec type: Union{ Nothing, QdrantFilterShould }
    min_should = nothing # spec type: Union{ Nothing, QdrantMinShould }
    must = nothing # spec type: Union{ Nothing, QdrantFilterMust }
    must_not = nothing # spec type: Union{ Nothing, QdrantFilterMustNot }

    function QdrantFilter(should, min_should, must, must_not, )
        OpenAPI.validate_property(QdrantFilter, Symbol("should"), should)
        OpenAPI.validate_property(QdrantFilter, Symbol("min_should"), min_should)
        OpenAPI.validate_property(QdrantFilter, Symbol("must"), must)
        OpenAPI.validate_property(QdrantFilter, Symbol("must_not"), must_not)
        return new(should, min_should, must, must_not, )
    end
end # type QdrantFilter

const _property_types_QdrantFilter = Dict{Symbol,String}(Symbol("should")=>"QdrantFilterShould", Symbol("min_should")=>"QdrantMinShould", Symbol("must")=>"QdrantFilterMust", Symbol("must_not")=>"QdrantFilterMustNot", )
OpenAPI.property_type(::Type{ QdrantFilter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantFilter[name]))}

function check_required(o::QdrantFilter)
    true
end

function OpenAPI.validate_property(::Type{ QdrantFilter }, name::Symbol, val)
end
