# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PayloadIndexInfo
Display payload field type &amp; index information

    QdrantPayloadIndexInfo(;
        data_type=nothing,
        params=nothing,
        points=nothing,
    )

    - data_type::QdrantPayloadSchemaType
    - params::QdrantTextIndexParams
    - points::Int64 : Number of points indexed with this index
"""
Base.@kwdef mutable struct QdrantPayloadIndexInfo <: OpenAPI.APIModel
    data_type = nothing # spec type: Union{ Nothing, QdrantPayloadSchemaType }
    params = nothing # spec type: Union{ Nothing, QdrantTextIndexParams }
    points::Union{Nothing, Int64} = nothing

    function QdrantPayloadIndexInfo(data_type, params, points, )
        OpenAPI.validate_property(QdrantPayloadIndexInfo, Symbol("data_type"), data_type)
        OpenAPI.validate_property(QdrantPayloadIndexInfo, Symbol("params"), params)
        OpenAPI.validate_property(QdrantPayloadIndexInfo, Symbol("points"), points)
        return new(data_type, params, points, )
    end
end # type QdrantPayloadIndexInfo

const _property_types_QdrantPayloadIndexInfo = Dict{Symbol,String}(Symbol("data_type")=>"QdrantPayloadSchemaType", Symbol("params")=>"QdrantTextIndexParams", Symbol("points")=>"Int64", )
OpenAPI.property_type(::Type{ QdrantPayloadIndexInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantPayloadIndexInfo[name]))}

function check_required(o::QdrantPayloadIndexInfo)
    o.data_type === nothing && (return false)
    o.points === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantPayloadIndexInfo }, name::Symbol, val)
    if name === Symbol("points")
        OpenAPI.validate_param(name, "QdrantPayloadIndexInfo", :format, val, "uint")
    end
    if name === Symbol("points")
        OpenAPI.validate_param(name, "QdrantPayloadIndexInfo", :minimum, val, 0, false)
    end
end
