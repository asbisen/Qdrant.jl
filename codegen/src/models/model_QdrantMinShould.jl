# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""MinShould

    QdrantMinShould(;
        conditions=nothing,
        min_count=nothing,
    )

    - conditions::Vector{QdrantCondition}
    - min_count::Int64
"""
Base.@kwdef mutable struct QdrantMinShould <: OpenAPI.APIModel
    conditions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantCondition} }
    min_count::Union{Nothing, Int64} = nothing

    function QdrantMinShould(conditions, min_count, )
        OpenAPI.validate_property(QdrantMinShould, Symbol("conditions"), conditions)
        OpenAPI.validate_property(QdrantMinShould, Symbol("min_count"), min_count)
        return new(conditions, min_count, )
    end
end # type QdrantMinShould

const _property_types_QdrantMinShould = Dict{Symbol,String}(Symbol("conditions")=>"Vector{QdrantCondition}", Symbol("min_count")=>"Int64", )
OpenAPI.property_type(::Type{ QdrantMinShould }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantMinShould[name]))}

function check_required(o::QdrantMinShould)
    o.conditions === nothing && (return false)
    o.min_count === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantMinShould }, name::Symbol, val)
    if name === Symbol("min_count")
        OpenAPI.validate_param(name, "QdrantMinShould", :format, val, "uint")
    end
    if name === Symbol("min_count")
        OpenAPI.validate_param(name, "QdrantMinShould", :minimum, val, 0, false)
    end
end
