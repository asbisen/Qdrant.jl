# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CountRequest
Count Request Counts the number of points which satisfy the given filter. If filter is not provided, the count of all points in the collection will be returned.

    QdrantCountRequest(;
        shard_key=nothing,
        filter=nothing,
        exact=true,
    )

    - shard_key::QdrantShardKeySelector
    - filter::QdrantFilter
    - exact::Bool : If true, count exact number of points. If false, count approximate number of points faster. Approximate count might be unreliable during the indexing process. Default: true
"""
Base.@kwdef mutable struct QdrantCountRequest <: OpenAPI.APIModel
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKeySelector }
    filter = nothing # spec type: Union{ Nothing, QdrantFilter }
    exact::Union{Nothing, Bool} = true

    function QdrantCountRequest(shard_key, filter, exact, )
        OpenAPI.validate_property(QdrantCountRequest, Symbol("shard_key"), shard_key)
        OpenAPI.validate_property(QdrantCountRequest, Symbol("filter"), filter)
        OpenAPI.validate_property(QdrantCountRequest, Symbol("exact"), exact)
        return new(shard_key, filter, exact, )
    end
end # type QdrantCountRequest

const _property_types_QdrantCountRequest = Dict{Symbol,String}(Symbol("shard_key")=>"QdrantShardKeySelector", Symbol("filter")=>"QdrantFilter", Symbol("exact")=>"Bool", )
OpenAPI.property_type(::Type{ QdrantCountRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantCountRequest[name]))}

function check_required(o::QdrantCountRequest)
    true
end

function OpenAPI.validate_property(::Type{ QdrantCountRequest }, name::Symbol, val)
end
