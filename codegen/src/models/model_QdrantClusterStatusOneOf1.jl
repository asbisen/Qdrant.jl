# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ClusterStatus_oneOf_1
Description of enabled cluster

    QdrantClusterStatusOneOf1(;
        status=nothing,
        peer_id=nothing,
        peers=nothing,
        raft_info=nothing,
        consensus_thread_status=nothing,
        message_send_failures=nothing,
    )

    - status::String
    - peer_id::Int64 : ID of this peer
    - peers::Dict{String, QdrantPeerInfo} : Peers composition of the cluster with main information
    - raft_info::QdrantRaftInfo
    - consensus_thread_status::QdrantConsensusThreadStatus
    - message_send_failures::Dict{String, QdrantMessageSendErrors} : Consequent failures of message send operations in consensus by peer address. On the first success to send to that peer - entry is removed from this hashmap.
"""
Base.@kwdef mutable struct QdrantClusterStatusOneOf1 <: OpenAPI.APIModel
    status::Union{Nothing, String} = nothing
    peer_id::Union{Nothing, Int64} = nothing
    peers::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, QdrantPeerInfo} }
    raft_info = nothing # spec type: Union{ Nothing, QdrantRaftInfo }
    consensus_thread_status = nothing # spec type: Union{ Nothing, QdrantConsensusThreadStatus }
    message_send_failures::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, QdrantMessageSendErrors} }

    function QdrantClusterStatusOneOf1(status, peer_id, peers, raft_info, consensus_thread_status, message_send_failures, )
        OpenAPI.validate_property(QdrantClusterStatusOneOf1, Symbol("status"), status)
        OpenAPI.validate_property(QdrantClusterStatusOneOf1, Symbol("peer_id"), peer_id)
        OpenAPI.validate_property(QdrantClusterStatusOneOf1, Symbol("peers"), peers)
        OpenAPI.validate_property(QdrantClusterStatusOneOf1, Symbol("raft_info"), raft_info)
        OpenAPI.validate_property(QdrantClusterStatusOneOf1, Symbol("consensus_thread_status"), consensus_thread_status)
        OpenAPI.validate_property(QdrantClusterStatusOneOf1, Symbol("message_send_failures"), message_send_failures)
        return new(status, peer_id, peers, raft_info, consensus_thread_status, message_send_failures, )
    end
end # type QdrantClusterStatusOneOf1

const _property_types_QdrantClusterStatusOneOf1 = Dict{Symbol,String}(Symbol("status")=>"String", Symbol("peer_id")=>"Int64", Symbol("peers")=>"Dict{String, QdrantPeerInfo}", Symbol("raft_info")=>"QdrantRaftInfo", Symbol("consensus_thread_status")=>"QdrantConsensusThreadStatus", Symbol("message_send_failures")=>"Dict{String, QdrantMessageSendErrors}", )
OpenAPI.property_type(::Type{ QdrantClusterStatusOneOf1 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantClusterStatusOneOf1[name]))}

function check_required(o::QdrantClusterStatusOneOf1)
    o.status === nothing && (return false)
    o.peer_id === nothing && (return false)
    o.peers === nothing && (return false)
    o.raft_info === nothing && (return false)
    o.consensus_thread_status === nothing && (return false)
    o.message_send_failures === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantClusterStatusOneOf1 }, name::Symbol, val)
    if name === Symbol("status")
        OpenAPI.validate_param(name, "QdrantClusterStatusOneOf1", :enum, val, ["enabled"])
    end
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantClusterStatusOneOf1", :format, val, "uint64")
    end
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantClusterStatusOneOf1", :minimum, val, 0, false)
    end
end
