# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateVectors

    QdrantUpdateVectors(;
        points=nothing,
        shard_key=nothing,
    )

    - points::Vector{QdrantPointVectors} : Points with named vectors
    - shard_key::QdrantShardKeySelector
"""
Base.@kwdef mutable struct QdrantUpdateVectors <: OpenAPI.APIModel
    points::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantPointVectors} }
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKeySelector }

    function QdrantUpdateVectors(points, shard_key, )
        OpenAPI.validate_property(QdrantUpdateVectors, Symbol("points"), points)
        OpenAPI.validate_property(QdrantUpdateVectors, Symbol("shard_key"), shard_key)
        return new(points, shard_key, )
    end
end # type QdrantUpdateVectors

const _property_types_QdrantUpdateVectors = Dict{Symbol,String}(Symbol("points")=>"Vector{QdrantPointVectors}", Symbol("shard_key")=>"QdrantShardKeySelector", )
OpenAPI.property_type(::Type{ QdrantUpdateVectors }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantUpdateVectors[name]))}

function check_required(o::QdrantUpdateVectors)
    o.points === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantUpdateVectors }, name::Symbol, val)
    if name === Symbol("points")
        OpenAPI.validate_param(name, "QdrantUpdateVectors", :minItems, val, 1)
    end
end
