# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ScrollResult
Result of the points read request

    QdrantScrollResult(;
        points=nothing,
        next_page_offset=nothing,
    )

    - points::Vector{QdrantRecord} : List of retrieved points
    - next_page_offset::QdrantExtendedPointId
"""
Base.@kwdef mutable struct QdrantScrollResult <: OpenAPI.APIModel
    points::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantRecord} }
    next_page_offset = nothing # spec type: Union{ Nothing, QdrantExtendedPointId }

    function QdrantScrollResult(points, next_page_offset, )
        OpenAPI.validate_property(QdrantScrollResult, Symbol("points"), points)
        OpenAPI.validate_property(QdrantScrollResult, Symbol("next_page_offset"), next_page_offset)
        return new(points, next_page_offset, )
    end
end # type QdrantScrollResult

const _property_types_QdrantScrollResult = Dict{Symbol,String}(Symbol("points")=>"Vector{QdrantRecord}", Symbol("next_page_offset")=>"QdrantExtendedPointId", )
OpenAPI.property_type(::Type{ QdrantScrollResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantScrollResult[name]))}

function check_required(o::QdrantScrollResult)
    o.points === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantScrollResult }, name::Symbol, val)
end
