# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""QueryRequest

    QdrantQueryRequest(;
        shard_key=nothing,
        prefetch=nothing,
        query=nothing,
        var"using"=nothing,
        filter=nothing,
        params=nothing,
        score_threshold=nothing,
        limit=nothing,
        offset=nothing,
        with_vector=nothing,
        with_payload=nothing,
        lookup_from=nothing,
    )

    - shard_key::QdrantShardKeySelector
    - prefetch::QdrantQueryRequestPrefetch
    - query::QdrantQueryInterface
    - var"using"::String : Define which vector name to use for querying. If missing, the default vector is used.
    - filter::QdrantFilter
    - params::QdrantSearchParams
    - score_threshold::Float32 : Return points with scores better than this threshold.
    - limit::Int64 : Max number of points to return. Default is 10.
    - offset::Int64 : Offset of the result. Skip this many points. Default is 0
    - with_vector::QdrantWithVector
    - with_payload::QdrantWithPayloadInterface
    - lookup_from::QdrantLookupLocation
"""
Base.@kwdef mutable struct QdrantQueryRequest <: OpenAPI.APIModel
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKeySelector }
    prefetch = nothing # spec type: Union{ Nothing, QdrantQueryRequestPrefetch }
    query = nothing # spec type: Union{ Nothing, QdrantQueryInterface }
    var"using"::Union{Nothing, String} = nothing
    filter = nothing # spec type: Union{ Nothing, QdrantFilter }
    params = nothing # spec type: Union{ Nothing, QdrantSearchParams }
    score_threshold::Union{Nothing, Float32} = nothing
    limit::Union{Nothing, Int64} = nothing
    offset::Union{Nothing, Int64} = nothing
    with_vector = nothing # spec type: Union{ Nothing, QdrantWithVector }
    with_payload = nothing # spec type: Union{ Nothing, QdrantWithPayloadInterface }
    lookup_from = nothing # spec type: Union{ Nothing, QdrantLookupLocation }

    function QdrantQueryRequest(shard_key, prefetch, query, var"using", filter, params, score_threshold, limit, offset, with_vector, with_payload, lookup_from, )
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("shard_key"), shard_key)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("prefetch"), prefetch)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("query"), query)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("using"), var"using")
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("filter"), filter)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("params"), params)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("score_threshold"), score_threshold)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("offset"), offset)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("with_vector"), with_vector)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("with_payload"), with_payload)
        OpenAPI.validate_property(QdrantQueryRequest, Symbol("lookup_from"), lookup_from)
        return new(shard_key, prefetch, query, var"using", filter, params, score_threshold, limit, offset, with_vector, with_payload, lookup_from, )
    end
end # type QdrantQueryRequest

const _property_types_QdrantQueryRequest = Dict{Symbol,String}(Symbol("shard_key")=>"QdrantShardKeySelector", Symbol("prefetch")=>"QdrantQueryRequestPrefetch", Symbol("query")=>"QdrantQueryInterface", Symbol("using")=>"String", Symbol("filter")=>"QdrantFilter", Symbol("params")=>"QdrantSearchParams", Symbol("score_threshold")=>"Float32", Symbol("limit")=>"Int64", Symbol("offset")=>"Int64", Symbol("with_vector")=>"QdrantWithVector", Symbol("with_payload")=>"QdrantWithPayloadInterface", Symbol("lookup_from")=>"QdrantLookupLocation", )
OpenAPI.property_type(::Type{ QdrantQueryRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantQueryRequest[name]))}

function check_required(o::QdrantQueryRequest)
    true
end

function OpenAPI.validate_property(::Type{ QdrantQueryRequest }, name::Symbol, val)
    if name === Symbol("score_threshold")
        OpenAPI.validate_param(name, "QdrantQueryRequest", :format, val, "float")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "QdrantQueryRequest", :format, val, "uint")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "QdrantQueryRequest", :minimum, val, 1, false)
    end
    if name === Symbol("offset")
        OpenAPI.validate_param(name, "QdrantQueryRequest", :format, val, "uint")
    end
    if name === Symbol("offset")
        OpenAPI.validate_param(name, "QdrantQueryRequest", :minimum, val, 0, false)
    end
end
