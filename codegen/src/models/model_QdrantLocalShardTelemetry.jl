# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LocalShardTelemetry

    QdrantLocalShardTelemetry(;
        variant_name=nothing,
        segments=nothing,
        optimizations=nothing,
    )

    - variant_name::String
    - segments::Vector{QdrantSegmentTelemetry}
    - optimizations::QdrantOptimizerTelemetry
"""
Base.@kwdef mutable struct QdrantLocalShardTelemetry <: OpenAPI.APIModel
    variant_name::Union{Nothing, String} = nothing
    segments::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantSegmentTelemetry} }
    optimizations = nothing # spec type: Union{ Nothing, QdrantOptimizerTelemetry }

    function QdrantLocalShardTelemetry(variant_name, segments, optimizations, )
        OpenAPI.validate_property(QdrantLocalShardTelemetry, Symbol("variant_name"), variant_name)
        OpenAPI.validate_property(QdrantLocalShardTelemetry, Symbol("segments"), segments)
        OpenAPI.validate_property(QdrantLocalShardTelemetry, Symbol("optimizations"), optimizations)
        return new(variant_name, segments, optimizations, )
    end
end # type QdrantLocalShardTelemetry

const _property_types_QdrantLocalShardTelemetry = Dict{Symbol,String}(Symbol("variant_name")=>"String", Symbol("segments")=>"Vector{QdrantSegmentTelemetry}", Symbol("optimizations")=>"QdrantOptimizerTelemetry", )
OpenAPI.property_type(::Type{ QdrantLocalShardTelemetry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantLocalShardTelemetry[name]))}

function check_required(o::QdrantLocalShardTelemetry)
    o.segments === nothing && (return false)
    o.optimizations === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantLocalShardTelemetry }, name::Symbol, val)
end
