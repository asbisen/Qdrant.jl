# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ClusterStatusTelemetry

    QdrantClusterStatusTelemetry(;
        number_of_peers=nothing,
        term=nothing,
        commit=nothing,
        pending_operations=nothing,
        role=nothing,
        is_voter=nothing,
        peer_id=nothing,
        consensus_thread_status=nothing,
    )

    - number_of_peers::Int64
    - term::Int64
    - commit::Int64
    - pending_operations::Int64
    - role::QdrantStateRole
    - is_voter::Bool
    - peer_id::Int64
    - consensus_thread_status::QdrantConsensusThreadStatus
"""
Base.@kwdef mutable struct QdrantClusterStatusTelemetry <: OpenAPI.APIModel
    number_of_peers::Union{Nothing, Int64} = nothing
    term::Union{Nothing, Int64} = nothing
    commit::Union{Nothing, Int64} = nothing
    pending_operations::Union{Nothing, Int64} = nothing
    role = nothing # spec type: Union{ Nothing, QdrantStateRole }
    is_voter::Union{Nothing, Bool} = nothing
    peer_id::Union{Nothing, Int64} = nothing
    consensus_thread_status = nothing # spec type: Union{ Nothing, QdrantConsensusThreadStatus }

    function QdrantClusterStatusTelemetry(number_of_peers, term, commit, pending_operations, role, is_voter, peer_id, consensus_thread_status, )
        OpenAPI.validate_property(QdrantClusterStatusTelemetry, Symbol("number_of_peers"), number_of_peers)
        OpenAPI.validate_property(QdrantClusterStatusTelemetry, Symbol("term"), term)
        OpenAPI.validate_property(QdrantClusterStatusTelemetry, Symbol("commit"), commit)
        OpenAPI.validate_property(QdrantClusterStatusTelemetry, Symbol("pending_operations"), pending_operations)
        OpenAPI.validate_property(QdrantClusterStatusTelemetry, Symbol("role"), role)
        OpenAPI.validate_property(QdrantClusterStatusTelemetry, Symbol("is_voter"), is_voter)
        OpenAPI.validate_property(QdrantClusterStatusTelemetry, Symbol("peer_id"), peer_id)
        OpenAPI.validate_property(QdrantClusterStatusTelemetry, Symbol("consensus_thread_status"), consensus_thread_status)
        return new(number_of_peers, term, commit, pending_operations, role, is_voter, peer_id, consensus_thread_status, )
    end
end # type QdrantClusterStatusTelemetry

const _property_types_QdrantClusterStatusTelemetry = Dict{Symbol,String}(Symbol("number_of_peers")=>"Int64", Symbol("term")=>"Int64", Symbol("commit")=>"Int64", Symbol("pending_operations")=>"Int64", Symbol("role")=>"QdrantStateRole", Symbol("is_voter")=>"Bool", Symbol("peer_id")=>"Int64", Symbol("consensus_thread_status")=>"QdrantConsensusThreadStatus", )
OpenAPI.property_type(::Type{ QdrantClusterStatusTelemetry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantClusterStatusTelemetry[name]))}

function check_required(o::QdrantClusterStatusTelemetry)
    o.number_of_peers === nothing && (return false)
    o.term === nothing && (return false)
    o.commit === nothing && (return false)
    o.pending_operations === nothing && (return false)
    o.is_voter === nothing && (return false)
    o.consensus_thread_status === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantClusterStatusTelemetry }, name::Symbol, val)
    if name === Symbol("number_of_peers")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :format, val, "uint")
    end
    if name === Symbol("number_of_peers")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :minimum, val, 0, false)
    end
    if name === Symbol("term")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :format, val, "uint64")
    end
    if name === Symbol("term")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :minimum, val, 0, false)
    end
    if name === Symbol("commit")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :format, val, "uint64")
    end
    if name === Symbol("commit")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :minimum, val, 0, false)
    end
    if name === Symbol("pending_operations")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :format, val, "uint")
    end
    if name === Symbol("pending_operations")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :minimum, val, 0, false)
    end
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :format, val, "uint64")
    end
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantClusterStatusTelemetry", :minimum, val, 0, false)
    end
end
