# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LookupLocation
Defines a location to use for looking up the vector. Specifies collection and vector field name.

    QdrantLookupLocation(;
        collection=nothing,
        vector=nothing,
        shard_key=nothing,
    )

    - collection::String : Name of the collection used for lookup
    - vector::String : Optional name of the vector field within the collection. If not provided, the default vector field will be used.
    - shard_key::QdrantShardKeySelector
"""
Base.@kwdef mutable struct QdrantLookupLocation <: OpenAPI.APIModel
    collection::Union{Nothing, String} = nothing
    vector::Union{Nothing, String} = nothing
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKeySelector }

    function QdrantLookupLocation(collection, vector, shard_key, )
        OpenAPI.validate_property(QdrantLookupLocation, Symbol("collection"), collection)
        OpenAPI.validate_property(QdrantLookupLocation, Symbol("vector"), vector)
        OpenAPI.validate_property(QdrantLookupLocation, Symbol("shard_key"), shard_key)
        return new(collection, vector, shard_key, )
    end
end # type QdrantLookupLocation

const _property_types_QdrantLookupLocation = Dict{Symbol,String}(Symbol("collection")=>"String", Symbol("vector")=>"String", Symbol("shard_key")=>"QdrantShardKeySelector", )
OpenAPI.property_type(::Type{ QdrantLookupLocation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantLookupLocation[name]))}

function check_required(o::QdrantLookupLocation)
    o.collection === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantLookupLocation }, name::Symbol, val)
end
