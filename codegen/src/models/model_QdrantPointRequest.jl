# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PointRequest

    QdrantPointRequest(;
        shard_key=nothing,
        ids=nothing,
        with_payload=nothing,
        with_vector=nothing,
    )

    - shard_key::QdrantShardKeySelector
    - ids::Vector{QdrantExtendedPointId} : Look for points with ids
    - with_payload::QdrantWithPayloadInterface
    - with_vector::QdrantWithVector
"""
Base.@kwdef mutable struct QdrantPointRequest <: OpenAPI.APIModel
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKeySelector }
    ids::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantExtendedPointId} }
    with_payload = nothing # spec type: Union{ Nothing, QdrantWithPayloadInterface }
    with_vector = nothing # spec type: Union{ Nothing, QdrantWithVector }

    function QdrantPointRequest(shard_key, ids, with_payload, with_vector, )
        OpenAPI.validate_property(QdrantPointRequest, Symbol("shard_key"), shard_key)
        OpenAPI.validate_property(QdrantPointRequest, Symbol("ids"), ids)
        OpenAPI.validate_property(QdrantPointRequest, Symbol("with_payload"), with_payload)
        OpenAPI.validate_property(QdrantPointRequest, Symbol("with_vector"), with_vector)
        return new(shard_key, ids, with_payload, with_vector, )
    end
end # type QdrantPointRequest

const _property_types_QdrantPointRequest = Dict{Symbol,String}(Symbol("shard_key")=>"QdrantShardKeySelector", Symbol("ids")=>"Vector{QdrantExtendedPointId}", Symbol("with_payload")=>"QdrantWithPayloadInterface", Symbol("with_vector")=>"QdrantWithVector", )
OpenAPI.property_type(::Type{ QdrantPointRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantPointRequest[name]))}

function check_required(o::QdrantPointRequest)
    o.ids === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantPointRequest }, name::Symbol, val)
end
