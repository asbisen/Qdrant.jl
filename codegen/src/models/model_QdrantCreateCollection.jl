# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateCollection
Operation for creating new collection and (optionally) specify index params

    QdrantCreateCollection(;
        vectors=nothing,
        shard_number=nothing,
        sharding_method=nothing,
        replication_factor=nothing,
        write_consistency_factor=nothing,
        on_disk_payload=nothing,
        hnsw_config=nothing,
        wal_config=nothing,
        optimizers_config=nothing,
        init_from=nothing,
        quantization_config=nothing,
        sparse_vectors=nothing,
    )

    - vectors::QdrantVectorsConfig
    - shard_number::Int64 : For auto sharding: Number of shards in collection. - Default is 1 for standalone, otherwise equal to the number of nodes - Minimum is 1 For custom sharding: Number of shards in collection per shard group. - Default is 1, meaning that each shard key will be mapped to a single shard - Minimum is 1
    - sharding_method::QdrantShardingMethod
    - replication_factor::Int64 : Number of shards replicas. Default is 1 Minimum is 1
    - write_consistency_factor::Int64 : Defines how many replicas should apply the operation for us to consider it successful. Increasing this number will make the collection more resilient to inconsistencies, but will also make it fail if not enough replicas are available. Does not have any performance impact.
    - on_disk_payload::Bool : If true - point&#39;s payload will not be stored in memory. It will be read from the disk every time it is requested. This setting saves RAM by (slightly) increasing the response time. Note: those payload values that are involved in filtering and are indexed - remain in RAM.
    - hnsw_config::QdrantHnswConfigDiff
    - wal_config::QdrantWalConfigDiff
    - optimizers_config::QdrantOptimizersConfigDiff
    - init_from::QdrantInitFrom
    - quantization_config::QdrantQuantizationConfig
    - sparse_vectors::Dict{String, QdrantSparseVectorParams} : Sparse vector data config.
"""
Base.@kwdef mutable struct QdrantCreateCollection <: OpenAPI.APIModel
    vectors = nothing # spec type: Union{ Nothing, QdrantVectorsConfig }
    shard_number::Union{Nothing, Int64} = nothing
    sharding_method = nothing # spec type: Union{ Nothing, QdrantShardingMethod }
    replication_factor::Union{Nothing, Int64} = nothing
    write_consistency_factor::Union{Nothing, Int64} = nothing
    on_disk_payload::Union{Nothing, Bool} = nothing
    hnsw_config = nothing # spec type: Union{ Nothing, QdrantHnswConfigDiff }
    wal_config = nothing # spec type: Union{ Nothing, QdrantWalConfigDiff }
    optimizers_config = nothing # spec type: Union{ Nothing, QdrantOptimizersConfigDiff }
    init_from = nothing # spec type: Union{ Nothing, QdrantInitFrom }
    quantization_config = nothing # spec type: Union{ Nothing, QdrantQuantizationConfig }
    sparse_vectors::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, QdrantSparseVectorParams} }

    function QdrantCreateCollection(vectors, shard_number, sharding_method, replication_factor, write_consistency_factor, on_disk_payload, hnsw_config, wal_config, optimizers_config, init_from, quantization_config, sparse_vectors, )
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("vectors"), vectors)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("shard_number"), shard_number)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("sharding_method"), sharding_method)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("replication_factor"), replication_factor)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("write_consistency_factor"), write_consistency_factor)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("on_disk_payload"), on_disk_payload)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("hnsw_config"), hnsw_config)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("wal_config"), wal_config)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("optimizers_config"), optimizers_config)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("init_from"), init_from)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("quantization_config"), quantization_config)
        OpenAPI.validate_property(QdrantCreateCollection, Symbol("sparse_vectors"), sparse_vectors)
        return new(vectors, shard_number, sharding_method, replication_factor, write_consistency_factor, on_disk_payload, hnsw_config, wal_config, optimizers_config, init_from, quantization_config, sparse_vectors, )
    end
end # type QdrantCreateCollection

const _property_types_QdrantCreateCollection = Dict{Symbol,String}(Symbol("vectors")=>"QdrantVectorsConfig", Symbol("shard_number")=>"Int64", Symbol("sharding_method")=>"QdrantShardingMethod", Symbol("replication_factor")=>"Int64", Symbol("write_consistency_factor")=>"Int64", Symbol("on_disk_payload")=>"Bool", Symbol("hnsw_config")=>"QdrantHnswConfigDiff", Symbol("wal_config")=>"QdrantWalConfigDiff", Symbol("optimizers_config")=>"QdrantOptimizersConfigDiff", Symbol("init_from")=>"QdrantInitFrom", Symbol("quantization_config")=>"QdrantQuantizationConfig", Symbol("sparse_vectors")=>"Dict{String, QdrantSparseVectorParams}", )
OpenAPI.property_type(::Type{ QdrantCreateCollection }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantCreateCollection[name]))}

function check_required(o::QdrantCreateCollection)
    true
end

function OpenAPI.validate_property(::Type{ QdrantCreateCollection }, name::Symbol, val)
    if name === Symbol("shard_number")
        OpenAPI.validate_param(name, "QdrantCreateCollection", :format, val, "uint32")
    end
    if name === Symbol("shard_number")
        OpenAPI.validate_param(name, "QdrantCreateCollection", :minimum, val, 1, false)
    end
    if name === Symbol("replication_factor")
        OpenAPI.validate_param(name, "QdrantCreateCollection", :format, val, "uint32")
    end
    if name === Symbol("replication_factor")
        OpenAPI.validate_param(name, "QdrantCreateCollection", :minimum, val, 1, false)
    end
    if name === Symbol("write_consistency_factor")
        OpenAPI.validate_param(name, "QdrantCreateCollection", :format, val, "uint32")
    end
    if name === Symbol("write_consistency_factor")
        OpenAPI.validate_param(name, "QdrantCreateCollection", :minimum, val, 1, false)
    end
end
