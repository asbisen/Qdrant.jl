# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SearchRequest
Search request. Holds all conditions and parameters for the search of most similar points by vector similarity given the filtering restrictions.

    QdrantSearchRequest(;
        shard_key=nothing,
        vector=nothing,
        filter=nothing,
        params=nothing,
        limit=nothing,
        offset=nothing,
        with_payload=nothing,
        with_vector=nothing,
        score_threshold=nothing,
    )

    - shard_key::QdrantShardKeySelector
    - vector::QdrantNamedVectorStruct
    - filter::QdrantFilter
    - params::QdrantSearchParams
    - limit::Int64 : Max number of result to return
    - offset::Int64 : Offset of the first result to return. May be used to paginate results. Note: large offset values may cause performance issues.
    - with_payload::QdrantWithPayloadInterface
    - with_vector::QdrantWithVector
    - score_threshold::Float32 : Define a minimal score threshold for the result. If defined, less similar results will not be returned. Score of the returned result might be higher or smaller than the threshold depending on the Distance function used. E.g. for cosine similarity only higher scores will be returned.
"""
Base.@kwdef mutable struct QdrantSearchRequest <: OpenAPI.APIModel
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKeySelector }
    vector = nothing # spec type: Union{ Nothing, QdrantNamedVectorStruct }
    filter = nothing # spec type: Union{ Nothing, QdrantFilter }
    params = nothing # spec type: Union{ Nothing, QdrantSearchParams }
    limit::Union{Nothing, Int64} = nothing
    offset::Union{Nothing, Int64} = nothing
    with_payload = nothing # spec type: Union{ Nothing, QdrantWithPayloadInterface }
    with_vector = nothing # spec type: Union{ Nothing, QdrantWithVector }
    score_threshold::Union{Nothing, Float32} = nothing

    function QdrantSearchRequest(shard_key, vector, filter, params, limit, offset, with_payload, with_vector, score_threshold, )
        OpenAPI.validate_property(QdrantSearchRequest, Symbol("shard_key"), shard_key)
        OpenAPI.validate_property(QdrantSearchRequest, Symbol("vector"), vector)
        OpenAPI.validate_property(QdrantSearchRequest, Symbol("filter"), filter)
        OpenAPI.validate_property(QdrantSearchRequest, Symbol("params"), params)
        OpenAPI.validate_property(QdrantSearchRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(QdrantSearchRequest, Symbol("offset"), offset)
        OpenAPI.validate_property(QdrantSearchRequest, Symbol("with_payload"), with_payload)
        OpenAPI.validate_property(QdrantSearchRequest, Symbol("with_vector"), with_vector)
        OpenAPI.validate_property(QdrantSearchRequest, Symbol("score_threshold"), score_threshold)
        return new(shard_key, vector, filter, params, limit, offset, with_payload, with_vector, score_threshold, )
    end
end # type QdrantSearchRequest

const _property_types_QdrantSearchRequest = Dict{Symbol,String}(Symbol("shard_key")=>"QdrantShardKeySelector", Symbol("vector")=>"QdrantNamedVectorStruct", Symbol("filter")=>"QdrantFilter", Symbol("params")=>"QdrantSearchParams", Symbol("limit")=>"Int64", Symbol("offset")=>"Int64", Symbol("with_payload")=>"QdrantWithPayloadInterface", Symbol("with_vector")=>"QdrantWithVector", Symbol("score_threshold")=>"Float32", )
OpenAPI.property_type(::Type{ QdrantSearchRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantSearchRequest[name]))}

function check_required(o::QdrantSearchRequest)
    o.vector === nothing && (return false)
    o.limit === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantSearchRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "QdrantSearchRequest", :format, val, "uint")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "QdrantSearchRequest", :minimum, val, 1, false)
    end
    if name === Symbol("offset")
        OpenAPI.validate_param(name, "QdrantSearchRequest", :format, val, "uint")
    end
    if name === Symbol("offset")
        OpenAPI.validate_param(name, "QdrantSearchRequest", :minimum, val, 0, false)
    end
    if name === Symbol("score_threshold")
        OpenAPI.validate_param(name, "QdrantSearchRequest", :format, val, "float")
    end
end
