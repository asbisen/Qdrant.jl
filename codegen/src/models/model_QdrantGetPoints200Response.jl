# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""get_points_200_response

    QdrantGetPoints200Response(;
        time=nothing,
        status=nothing,
        result=nothing,
    )

    - time::Float32 : Time spent to process this request
    - status::String
    - result::Vector{QdrantRecord}
"""
Base.@kwdef mutable struct QdrantGetPoints200Response <: OpenAPI.APIModel
    time::Union{Nothing, Float32} = nothing
    status::Union{Nothing, String} = nothing
    result::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantRecord} }

    function QdrantGetPoints200Response(time, status, result, )
        OpenAPI.validate_property(QdrantGetPoints200Response, Symbol("time"), time)
        OpenAPI.validate_property(QdrantGetPoints200Response, Symbol("status"), status)
        OpenAPI.validate_property(QdrantGetPoints200Response, Symbol("result"), result)
        return new(time, status, result, )
    end
end # type QdrantGetPoints200Response

const _property_types_QdrantGetPoints200Response = Dict{Symbol,String}(Symbol("time")=>"Float32", Symbol("status")=>"String", Symbol("result")=>"Vector{QdrantRecord}", )
OpenAPI.property_type(::Type{ QdrantGetPoints200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantGetPoints200Response[name]))}

function check_required(o::QdrantGetPoints200Response)
    true
end

function OpenAPI.validate_property(::Type{ QdrantGetPoints200Response }, name::Symbol, val)
    if name === Symbol("time")
        OpenAPI.validate_param(name, "QdrantGetPoints200Response", :format, val, "float")
    end
end
