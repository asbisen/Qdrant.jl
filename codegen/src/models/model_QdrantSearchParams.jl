# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SearchParams
Additional parameters of the search

    QdrantSearchParams(;
        hnsw_ef=nothing,
        exact=false,
        quantization=nothing,
        indexed_only=false,
    )

    - hnsw_ef::Int64 : Params relevant to HNSW index Size of the beam in a beam-search. Larger the value - more accurate the result, more time required for search.
    - exact::Bool : Search without approximation. If set to true, search may run long but with exact results.
    - quantization::QdrantQuantizationSearchParams
    - indexed_only::Bool : If enabled, the engine will only perform search among indexed or small segments. Using this option prevents slow searches in case of delayed index, but does not guarantee that all uploaded vectors will be included in search results
"""
Base.@kwdef mutable struct QdrantSearchParams <: OpenAPI.APIModel
    hnsw_ef::Union{Nothing, Int64} = nothing
    exact::Union{Nothing, Bool} = false
    quantization = nothing # spec type: Union{ Nothing, QdrantQuantizationSearchParams }
    indexed_only::Union{Nothing, Bool} = false

    function QdrantSearchParams(hnsw_ef, exact, quantization, indexed_only, )
        OpenAPI.validate_property(QdrantSearchParams, Symbol("hnsw_ef"), hnsw_ef)
        OpenAPI.validate_property(QdrantSearchParams, Symbol("exact"), exact)
        OpenAPI.validate_property(QdrantSearchParams, Symbol("quantization"), quantization)
        OpenAPI.validate_property(QdrantSearchParams, Symbol("indexed_only"), indexed_only)
        return new(hnsw_ef, exact, quantization, indexed_only, )
    end
end # type QdrantSearchParams

const _property_types_QdrantSearchParams = Dict{Symbol,String}(Symbol("hnsw_ef")=>"Int64", Symbol("exact")=>"Bool", Symbol("quantization")=>"QdrantQuantizationSearchParams", Symbol("indexed_only")=>"Bool", )
OpenAPI.property_type(::Type{ QdrantSearchParams }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantSearchParams[name]))}

function check_required(o::QdrantSearchParams)
    true
end

function OpenAPI.validate_property(::Type{ QdrantSearchParams }, name::Symbol, val)
    if name === Symbol("hnsw_ef")
        OpenAPI.validate_param(name, "QdrantSearchParams", :format, val, "uint")
    end
    if name === Symbol("hnsw_ef")
        OpenAPI.validate_param(name, "QdrantSearchParams", :minimum, val, 0, false)
    end
end
