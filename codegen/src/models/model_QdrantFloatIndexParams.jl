# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FloatIndexParams

    QdrantFloatIndexParams(;
        type=nothing,
        is_principal=nothing,
        on_disk=nothing,
    )

    - type::QdrantFloatIndexType
    - is_principal::Bool : If true - use this key to organize storage of the collection data. This option assumes that this key will be used in majority of filtered requests.
    - on_disk::Bool : If true, store the index on disk. Default: false.
"""
Base.@kwdef mutable struct QdrantFloatIndexParams <: OpenAPI.APIModel
    type = nothing # spec type: Union{ Nothing, QdrantFloatIndexType }
    is_principal::Union{Nothing, Bool} = nothing
    on_disk::Union{Nothing, Bool} = nothing

    function QdrantFloatIndexParams(type, is_principal, on_disk, )
        OpenAPI.validate_property(QdrantFloatIndexParams, Symbol("type"), type)
        OpenAPI.validate_property(QdrantFloatIndexParams, Symbol("is_principal"), is_principal)
        OpenAPI.validate_property(QdrantFloatIndexParams, Symbol("on_disk"), on_disk)
        return new(type, is_principal, on_disk, )
    end
end # type QdrantFloatIndexParams

const _property_types_QdrantFloatIndexParams = Dict{Symbol,String}(Symbol("type")=>"QdrantFloatIndexType", Symbol("is_principal")=>"Bool", Symbol("on_disk")=>"Bool", )
OpenAPI.property_type(::Type{ QdrantFloatIndexParams }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantFloatIndexParams[name]))}

function check_required(o::QdrantFloatIndexParams)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantFloatIndexParams }, name::Symbol, val)
end
