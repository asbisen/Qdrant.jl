# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DiscoverRequest
Use context and a target to find the most similar points, constrained by the context.

    QdrantDiscoverRequest(;
        shard_key=nothing,
        target=nothing,
        context=nothing,
        filter=nothing,
        params=nothing,
        limit=nothing,
        offset=nothing,
        with_payload=nothing,
        with_vector=nothing,
        var"using"=nothing,
        lookup_from=nothing,
    )

    - shard_key::QdrantShardKeySelector
    - target::QdrantRecommendExample
    - context::Vector{QdrantContextExamplePair} : Pairs of { positive, negative } examples to constrain the search.  When using only the context (without a target), a special search - called context search - is performed where pairs of points are used to generate a loss that guides the search towards the zone where most positive examples overlap. This means that the score minimizes the scenario of finding a point closer to a negative than to a positive part of a pair.  Since the score of a context relates to loss, the maximum score a point can get is 0.0, and it becomes normal that many points can have a score of 0.0.  For discovery search (when including a target), the context part of the score for each pair is calculated +1 if the point is closer to a positive than to a negative part of a pair, and -1 otherwise.
    - filter::QdrantFilter
    - params::QdrantSearchParams
    - limit::Int64 : Max number of result to return
    - offset::Int64 : Offset of the first result to return. May be used to paginate results. Note: large offset values may cause performance issues.
    - with_payload::QdrantWithPayloadInterface
    - with_vector::QdrantWithVector
    - var"using"::String
    - lookup_from::QdrantLookupLocation
"""
Base.@kwdef mutable struct QdrantDiscoverRequest <: OpenAPI.APIModel
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKeySelector }
    target = nothing # spec type: Union{ Nothing, QdrantRecommendExample }
    context::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantContextExamplePair} }
    filter = nothing # spec type: Union{ Nothing, QdrantFilter }
    params = nothing # spec type: Union{ Nothing, QdrantSearchParams }
    limit::Union{Nothing, Int64} = nothing
    offset::Union{Nothing, Int64} = nothing
    with_payload = nothing # spec type: Union{ Nothing, QdrantWithPayloadInterface }
    with_vector = nothing # spec type: Union{ Nothing, QdrantWithVector }
    var"using"::Union{Nothing, String} = nothing
    lookup_from = nothing # spec type: Union{ Nothing, QdrantLookupLocation }

    function QdrantDiscoverRequest(shard_key, target, context, filter, params, limit, offset, with_payload, with_vector, var"using", lookup_from, )
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("shard_key"), shard_key)
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("target"), target)
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("context"), context)
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("filter"), filter)
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("params"), params)
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("limit"), limit)
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("offset"), offset)
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("with_payload"), with_payload)
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("with_vector"), with_vector)
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("using"), var"using")
        OpenAPI.validate_property(QdrantDiscoverRequest, Symbol("lookup_from"), lookup_from)
        return new(shard_key, target, context, filter, params, limit, offset, with_payload, with_vector, var"using", lookup_from, )
    end
end # type QdrantDiscoverRequest

const _property_types_QdrantDiscoverRequest = Dict{Symbol,String}(Symbol("shard_key")=>"QdrantShardKeySelector", Symbol("target")=>"QdrantRecommendExample", Symbol("context")=>"Vector{QdrantContextExamplePair}", Symbol("filter")=>"QdrantFilter", Symbol("params")=>"QdrantSearchParams", Symbol("limit")=>"Int64", Symbol("offset")=>"Int64", Symbol("with_payload")=>"QdrantWithPayloadInterface", Symbol("with_vector")=>"QdrantWithVector", Symbol("using")=>"String", Symbol("lookup_from")=>"QdrantLookupLocation", )
OpenAPI.property_type(::Type{ QdrantDiscoverRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantDiscoverRequest[name]))}

function check_required(o::QdrantDiscoverRequest)
    o.limit === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantDiscoverRequest }, name::Symbol, val)
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "QdrantDiscoverRequest", :format, val, "uint")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "QdrantDiscoverRequest", :minimum, val, 1, false)
    end
    if name === Symbol("offset")
        OpenAPI.validate_param(name, "QdrantDiscoverRequest", :format, val, "uint")
    end
    if name === Symbol("offset")
        OpenAPI.validate_param(name, "QdrantDiscoverRequest", :minimum, val, 0, false)
    end
end
