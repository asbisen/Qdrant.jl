# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CollectionsAggregatedTelemetry

    QdrantCollectionsAggregatedTelemetry(;
        vectors=nothing,
        optimizers_status=nothing,
        params=nothing,
    )

    - vectors::Int64
    - optimizers_status::QdrantOptimizersStatus
    - params::QdrantCollectionParams
"""
Base.@kwdef mutable struct QdrantCollectionsAggregatedTelemetry <: OpenAPI.APIModel
    vectors::Union{Nothing, Int64} = nothing
    optimizers_status = nothing # spec type: Union{ Nothing, QdrantOptimizersStatus }
    params = nothing # spec type: Union{ Nothing, QdrantCollectionParams }

    function QdrantCollectionsAggregatedTelemetry(vectors, optimizers_status, params, )
        OpenAPI.validate_property(QdrantCollectionsAggregatedTelemetry, Symbol("vectors"), vectors)
        OpenAPI.validate_property(QdrantCollectionsAggregatedTelemetry, Symbol("optimizers_status"), optimizers_status)
        OpenAPI.validate_property(QdrantCollectionsAggregatedTelemetry, Symbol("params"), params)
        return new(vectors, optimizers_status, params, )
    end
end # type QdrantCollectionsAggregatedTelemetry

const _property_types_QdrantCollectionsAggregatedTelemetry = Dict{Symbol,String}(Symbol("vectors")=>"Int64", Symbol("optimizers_status")=>"QdrantOptimizersStatus", Symbol("params")=>"QdrantCollectionParams", )
OpenAPI.property_type(::Type{ QdrantCollectionsAggregatedTelemetry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantCollectionsAggregatedTelemetry[name]))}

function check_required(o::QdrantCollectionsAggregatedTelemetry)
    o.vectors === nothing && (return false)
    o.optimizers_status === nothing && (return false)
    o.params === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantCollectionsAggregatedTelemetry }, name::Symbol, val)
    if name === Symbol("vectors")
        OpenAPI.validate_param(name, "QdrantCollectionsAggregatedTelemetry", :format, val, "uint")
    end
    if name === Symbol("vectors")
        OpenAPI.validate_param(name, "QdrantCollectionsAggregatedTelemetry", :minimum, val, 0, false)
    end
end
