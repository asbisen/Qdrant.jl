# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CollectionParams

    QdrantCollectionParams(;
        vectors=nothing,
        shard_number=1,
        sharding_method=nothing,
        replication_factor=1,
        write_consistency_factor=1,
        read_fan_out_factor=nothing,
        on_disk_payload=false,
        sparse_vectors=nothing,
    )

    - vectors::QdrantVectorsConfig
    - shard_number::Int64 : Number of shards the collection has
    - sharding_method::QdrantShardingMethod
    - replication_factor::Int64 : Number of replicas for each shard
    - write_consistency_factor::Int64 : Defines how many replicas should apply the operation for us to consider it successful. Increasing this number will make the collection more resilient to inconsistencies, but will also make it fail if not enough replicas are available. Does not have any performance impact.
    - read_fan_out_factor::Int64 : Defines how many additional replicas should be processing read request at the same time. Default value is Auto, which means that fan-out will be determined automatically based on the busyness of the local replica. Having more than 0 might be useful to smooth latency spikes of individual nodes.
    - on_disk_payload::Bool : If true - point&#39;s payload will not be stored in memory. It will be read from the disk every time it is requested. This setting saves RAM by (slightly) increasing the response time. Note: those payload values that are involved in filtering and are indexed - remain in RAM.
    - sparse_vectors::Dict{String, QdrantSparseVectorParams} : Configuration of the sparse vector storage
"""
Base.@kwdef mutable struct QdrantCollectionParams <: OpenAPI.APIModel
    vectors = nothing # spec type: Union{ Nothing, QdrantVectorsConfig }
    shard_number::Union{Nothing, Int64} = 1
    sharding_method = nothing # spec type: Union{ Nothing, QdrantShardingMethod }
    replication_factor::Union{Nothing, Int64} = 1
    write_consistency_factor::Union{Nothing, Int64} = 1
    read_fan_out_factor::Union{Nothing, Int64} = nothing
    on_disk_payload::Union{Nothing, Bool} = false
    sparse_vectors::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, QdrantSparseVectorParams} }

    function QdrantCollectionParams(vectors, shard_number, sharding_method, replication_factor, write_consistency_factor, read_fan_out_factor, on_disk_payload, sparse_vectors, )
        OpenAPI.validate_property(QdrantCollectionParams, Symbol("vectors"), vectors)
        OpenAPI.validate_property(QdrantCollectionParams, Symbol("shard_number"), shard_number)
        OpenAPI.validate_property(QdrantCollectionParams, Symbol("sharding_method"), sharding_method)
        OpenAPI.validate_property(QdrantCollectionParams, Symbol("replication_factor"), replication_factor)
        OpenAPI.validate_property(QdrantCollectionParams, Symbol("write_consistency_factor"), write_consistency_factor)
        OpenAPI.validate_property(QdrantCollectionParams, Symbol("read_fan_out_factor"), read_fan_out_factor)
        OpenAPI.validate_property(QdrantCollectionParams, Symbol("on_disk_payload"), on_disk_payload)
        OpenAPI.validate_property(QdrantCollectionParams, Symbol("sparse_vectors"), sparse_vectors)
        return new(vectors, shard_number, sharding_method, replication_factor, write_consistency_factor, read_fan_out_factor, on_disk_payload, sparse_vectors, )
    end
end # type QdrantCollectionParams

const _property_types_QdrantCollectionParams = Dict{Symbol,String}(Symbol("vectors")=>"QdrantVectorsConfig", Symbol("shard_number")=>"Int64", Symbol("sharding_method")=>"QdrantShardingMethod", Symbol("replication_factor")=>"Int64", Symbol("write_consistency_factor")=>"Int64", Symbol("read_fan_out_factor")=>"Int64", Symbol("on_disk_payload")=>"Bool", Symbol("sparse_vectors")=>"Dict{String, QdrantSparseVectorParams}", )
OpenAPI.property_type(::Type{ QdrantCollectionParams }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantCollectionParams[name]))}

function check_required(o::QdrantCollectionParams)
    true
end

function OpenAPI.validate_property(::Type{ QdrantCollectionParams }, name::Symbol, val)
    if name === Symbol("shard_number")
        OpenAPI.validate_param(name, "QdrantCollectionParams", :format, val, "uint32")
    end
    if name === Symbol("shard_number")
        OpenAPI.validate_param(name, "QdrantCollectionParams", :minimum, val, 1, false)
    end
    if name === Symbol("replication_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParams", :format, val, "uint32")
    end
    if name === Symbol("replication_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParams", :minimum, val, 1, false)
    end
    if name === Symbol("write_consistency_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParams", :format, val, "uint32")
    end
    if name === Symbol("write_consistency_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParams", :minimum, val, 1, false)
    end
    if name === Symbol("read_fan_out_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParams", :format, val, "uint32")
    end
    if name === Symbol("read_fan_out_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParams", :minimum, val, 0, false)
    end
end
