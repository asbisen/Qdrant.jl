# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ReplicaSetTelemetry

    QdrantReplicaSetTelemetry(;
        id=nothing,
        var"local"=nothing,
        remote=nothing,
        replicate_states=nothing,
    )

    - id::Int64
    - var"local"::QdrantLocalShardTelemetry
    - remote::Vector{QdrantRemoteShardTelemetry}
    - replicate_states::Dict{String, QdrantReplicaState}
"""
Base.@kwdef mutable struct QdrantReplicaSetTelemetry <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    var"local" = nothing # spec type: Union{ Nothing, QdrantLocalShardTelemetry }
    remote::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantRemoteShardTelemetry} }
    replicate_states::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, QdrantReplicaState} }

    function QdrantReplicaSetTelemetry(id, var"local", remote, replicate_states, )
        OpenAPI.validate_property(QdrantReplicaSetTelemetry, Symbol("id"), id)
        OpenAPI.validate_property(QdrantReplicaSetTelemetry, Symbol("local"), var"local")
        OpenAPI.validate_property(QdrantReplicaSetTelemetry, Symbol("remote"), remote)
        OpenAPI.validate_property(QdrantReplicaSetTelemetry, Symbol("replicate_states"), replicate_states)
        return new(id, var"local", remote, replicate_states, )
    end
end # type QdrantReplicaSetTelemetry

const _property_types_QdrantReplicaSetTelemetry = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("local")=>"QdrantLocalShardTelemetry", Symbol("remote")=>"Vector{QdrantRemoteShardTelemetry}", Symbol("replicate_states")=>"Dict{String, QdrantReplicaState}", )
OpenAPI.property_type(::Type{ QdrantReplicaSetTelemetry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantReplicaSetTelemetry[name]))}

function check_required(o::QdrantReplicaSetTelemetry)
    o.id === nothing && (return false)
    o.remote === nothing && (return false)
    o.replicate_states === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantReplicaSetTelemetry }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "QdrantReplicaSetTelemetry", :format, val, "uint32")
    end
    if name === Symbol("id")
        OpenAPI.validate_param(name, "QdrantReplicaSetTelemetry", :minimum, val, 0, false)
    end
end
