# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GeoPolygon
Geo filter request  Matches coordinates inside the polygon, defined by &#x60;exterior&#x60; and &#x60;interiors&#x60;

    QdrantGeoPolygon(;
        exterior=nothing,
        interiors=nothing,
    )

    - exterior::QdrantGeoLineString
    - interiors::Vector{QdrantGeoLineString} : Interior lines (if present) bound holes within the surface each GeoLineString must consist of a minimum of 4 points, and the first and last points must be the same.
"""
Base.@kwdef mutable struct QdrantGeoPolygon <: OpenAPI.APIModel
    exterior = nothing # spec type: Union{ Nothing, QdrantGeoLineString }
    interiors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantGeoLineString} }

    function QdrantGeoPolygon(exterior, interiors, )
        OpenAPI.validate_property(QdrantGeoPolygon, Symbol("exterior"), exterior)
        OpenAPI.validate_property(QdrantGeoPolygon, Symbol("interiors"), interiors)
        return new(exterior, interiors, )
    end
end # type QdrantGeoPolygon

const _property_types_QdrantGeoPolygon = Dict{Symbol,String}(Symbol("exterior")=>"QdrantGeoLineString", Symbol("interiors")=>"Vector{QdrantGeoLineString}", )
OpenAPI.property_type(::Type{ QdrantGeoPolygon }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantGeoPolygon[name]))}

function check_required(o::QdrantGeoPolygon)
    o.exterior === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantGeoPolygon }, name::Symbol, val)
end
