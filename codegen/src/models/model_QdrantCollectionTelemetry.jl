# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CollectionTelemetry

    QdrantCollectionTelemetry(;
        id=nothing,
        init_time_ms=nothing,
        config=nothing,
        shards=nothing,
        transfers=nothing,
    )

    - id::String
    - init_time_ms::Int64
    - config::QdrantCollectionConfig
    - shards::Vector{QdrantReplicaSetTelemetry}
    - transfers::Vector{QdrantShardTransferInfo}
"""
Base.@kwdef mutable struct QdrantCollectionTelemetry <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    init_time_ms::Union{Nothing, Int64} = nothing
    config = nothing # spec type: Union{ Nothing, QdrantCollectionConfig }
    shards::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantReplicaSetTelemetry} }
    transfers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantShardTransferInfo} }

    function QdrantCollectionTelemetry(id, init_time_ms, config, shards, transfers, )
        OpenAPI.validate_property(QdrantCollectionTelemetry, Symbol("id"), id)
        OpenAPI.validate_property(QdrantCollectionTelemetry, Symbol("init_time_ms"), init_time_ms)
        OpenAPI.validate_property(QdrantCollectionTelemetry, Symbol("config"), config)
        OpenAPI.validate_property(QdrantCollectionTelemetry, Symbol("shards"), shards)
        OpenAPI.validate_property(QdrantCollectionTelemetry, Symbol("transfers"), transfers)
        return new(id, init_time_ms, config, shards, transfers, )
    end
end # type QdrantCollectionTelemetry

const _property_types_QdrantCollectionTelemetry = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("init_time_ms")=>"Int64", Symbol("config")=>"QdrantCollectionConfig", Symbol("shards")=>"Vector{QdrantReplicaSetTelemetry}", Symbol("transfers")=>"Vector{QdrantShardTransferInfo}", )
OpenAPI.property_type(::Type{ QdrantCollectionTelemetry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantCollectionTelemetry[name]))}

function check_required(o::QdrantCollectionTelemetry)
    o.id === nothing && (return false)
    o.init_time_ms === nothing && (return false)
    o.config === nothing && (return false)
    o.shards === nothing && (return false)
    o.transfers === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantCollectionTelemetry }, name::Symbol, val)
    if name === Symbol("init_time_ms")
        OpenAPI.validate_param(name, "QdrantCollectionTelemetry", :format, val, "uint64")
    end
    if name === Symbol("init_time_ms")
        OpenAPI.validate_param(name, "QdrantCollectionTelemetry", :minimum, val, 0, false)
    end
end
