# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Range
Range filter request

    QdrantRange(;
        lt=nothing,
        gt=nothing,
        gte=nothing,
        lte=nothing,
    )

    - lt::Float64 : point.key &lt; range.lt
    - gt::Float64 : point.key &gt; range.gt
    - gte::Float64 : point.key &gt;&#x3D; range.gte
    - lte::Float64 : point.key &lt;&#x3D; range.lte
"""
Base.@kwdef mutable struct QdrantRange <: OpenAPI.APIModel
    lt::Union{Nothing, Float64} = nothing
    gt::Union{Nothing, Float64} = nothing
    gte::Union{Nothing, Float64} = nothing
    lte::Union{Nothing, Float64} = nothing

    function QdrantRange(lt, gt, gte, lte, )
        OpenAPI.validate_property(QdrantRange, Symbol("lt"), lt)
        OpenAPI.validate_property(QdrantRange, Symbol("gt"), gt)
        OpenAPI.validate_property(QdrantRange, Symbol("gte"), gte)
        OpenAPI.validate_property(QdrantRange, Symbol("lte"), lte)
        return new(lt, gt, gte, lte, )
    end
end # type QdrantRange

const _property_types_QdrantRange = Dict{Symbol,String}(Symbol("lt")=>"Float64", Symbol("gt")=>"Float64", Symbol("gte")=>"Float64", Symbol("lte")=>"Float64", )
OpenAPI.property_type(::Type{ QdrantRange }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantRange[name]))}

function check_required(o::QdrantRange)
    true
end

function OpenAPI.validate_property(::Type{ QdrantRange }, name::Symbol, val)
    if name === Symbol("lt")
        OpenAPI.validate_param(name, "QdrantRange", :format, val, "double")
    end
    if name === Symbol("gt")
        OpenAPI.validate_param(name, "QdrantRange", :format, val, "double")
    end
    if name === Symbol("gte")
        OpenAPI.validate_param(name, "QdrantRange", :format, val, "double")
    end
    if name === Symbol("lte")
        OpenAPI.validate_param(name, "QdrantRange", :format, val, "double")
    end
end
