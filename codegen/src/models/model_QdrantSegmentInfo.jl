# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SegmentInfo
Aggregated information about segment

    QdrantSegmentInfo(;
        segment_type=nothing,
        num_vectors=nothing,
        num_points=nothing,
        num_indexed_vectors=nothing,
        num_deleted_vectors=nothing,
        ram_usage_bytes=nothing,
        disk_usage_bytes=nothing,
        is_appendable=nothing,
        index_schema=nothing,
        vector_data=nothing,
    )

    - segment_type::QdrantSegmentType
    - num_vectors::Int64
    - num_points::Int64
    - num_indexed_vectors::Int64
    - num_deleted_vectors::Int64
    - ram_usage_bytes::Int64
    - disk_usage_bytes::Int64
    - is_appendable::Bool
    - index_schema::Dict{String, QdrantPayloadIndexInfo}
    - vector_data::Dict{String, QdrantVectorDataInfo}
"""
Base.@kwdef mutable struct QdrantSegmentInfo <: OpenAPI.APIModel
    segment_type = nothing # spec type: Union{ Nothing, QdrantSegmentType }
    num_vectors::Union{Nothing, Int64} = nothing
    num_points::Union{Nothing, Int64} = nothing
    num_indexed_vectors::Union{Nothing, Int64} = nothing
    num_deleted_vectors::Union{Nothing, Int64} = nothing
    ram_usage_bytes::Union{Nothing, Int64} = nothing
    disk_usage_bytes::Union{Nothing, Int64} = nothing
    is_appendable::Union{Nothing, Bool} = nothing
    index_schema::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, QdrantPayloadIndexInfo} }
    vector_data::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, QdrantVectorDataInfo} }

    function QdrantSegmentInfo(segment_type, num_vectors, num_points, num_indexed_vectors, num_deleted_vectors, ram_usage_bytes, disk_usage_bytes, is_appendable, index_schema, vector_data, )
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("segment_type"), segment_type)
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("num_vectors"), num_vectors)
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("num_points"), num_points)
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("num_indexed_vectors"), num_indexed_vectors)
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("num_deleted_vectors"), num_deleted_vectors)
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("ram_usage_bytes"), ram_usage_bytes)
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("disk_usage_bytes"), disk_usage_bytes)
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("is_appendable"), is_appendable)
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("index_schema"), index_schema)
        OpenAPI.validate_property(QdrantSegmentInfo, Symbol("vector_data"), vector_data)
        return new(segment_type, num_vectors, num_points, num_indexed_vectors, num_deleted_vectors, ram_usage_bytes, disk_usage_bytes, is_appendable, index_schema, vector_data, )
    end
end # type QdrantSegmentInfo

const _property_types_QdrantSegmentInfo = Dict{Symbol,String}(Symbol("segment_type")=>"QdrantSegmentType", Symbol("num_vectors")=>"Int64", Symbol("num_points")=>"Int64", Symbol("num_indexed_vectors")=>"Int64", Symbol("num_deleted_vectors")=>"Int64", Symbol("ram_usage_bytes")=>"Int64", Symbol("disk_usage_bytes")=>"Int64", Symbol("is_appendable")=>"Bool", Symbol("index_schema")=>"Dict{String, QdrantPayloadIndexInfo}", Symbol("vector_data")=>"Dict{String, QdrantVectorDataInfo}", )
OpenAPI.property_type(::Type{ QdrantSegmentInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantSegmentInfo[name]))}

function check_required(o::QdrantSegmentInfo)
    o.segment_type === nothing && (return false)
    o.num_vectors === nothing && (return false)
    o.num_points === nothing && (return false)
    o.num_indexed_vectors === nothing && (return false)
    o.num_deleted_vectors === nothing && (return false)
    o.ram_usage_bytes === nothing && (return false)
    o.disk_usage_bytes === nothing && (return false)
    o.is_appendable === nothing && (return false)
    o.index_schema === nothing && (return false)
    o.vector_data === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantSegmentInfo }, name::Symbol, val)
    if name === Symbol("num_vectors")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :format, val, "uint")
    end
    if name === Symbol("num_vectors")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :minimum, val, 0, false)
    end
    if name === Symbol("num_points")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :format, val, "uint")
    end
    if name === Symbol("num_points")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :minimum, val, 0, false)
    end
    if name === Symbol("num_indexed_vectors")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :format, val, "uint")
    end
    if name === Symbol("num_indexed_vectors")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :minimum, val, 0, false)
    end
    if name === Symbol("num_deleted_vectors")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :format, val, "uint")
    end
    if name === Symbol("num_deleted_vectors")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :minimum, val, 0, false)
    end
    if name === Symbol("ram_usage_bytes")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :format, val, "uint")
    end
    if name === Symbol("ram_usage_bytes")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :minimum, val, 0, false)
    end
    if name === Symbol("disk_usage_bytes")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :format, val, "uint")
    end
    if name === Symbol("disk_usage_bytes")
        OpenAPI.validate_param(name, "QdrantSegmentInfo", :minimum, val, 0, false)
    end
end
