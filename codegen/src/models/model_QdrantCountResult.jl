# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CountResult

    QdrantCountResult(;
        count=nothing,
    )

    - count::Int64 : Number of points which satisfy the conditions
"""
Base.@kwdef mutable struct QdrantCountResult <: OpenAPI.APIModel
    count::Union{Nothing, Int64} = nothing

    function QdrantCountResult(count, )
        OpenAPI.validate_property(QdrantCountResult, Symbol("count"), count)
        return new(count, )
    end
end # type QdrantCountResult

const _property_types_QdrantCountResult = Dict{Symbol,String}(Symbol("count")=>"Int64", )
OpenAPI.property_type(::Type{ QdrantCountResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantCountResult[name]))}

function check_required(o::QdrantCountResult)
    o.count === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantCountResult }, name::Symbol, val)
    if name === Symbol("count")
        OpenAPI.validate_param(name, "QdrantCountResult", :format, val, "uint")
    end
    if name === Symbol("count")
        OpenAPI.validate_param(name, "QdrantCountResult", :minimum, val, 0, false)
    end
end
