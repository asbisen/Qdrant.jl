# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DeletePayload
This data structure is used in API interface and applied across multiple shards

    QdrantDeletePayload(;
        keys=nothing,
        points=nothing,
        filter=nothing,
        shard_key=nothing,
    )

    - keys::Vector{String} : List of payload keys to remove from payload
    - points::Vector{QdrantExtendedPointId} : Deletes values from each point in this list
    - filter::QdrantFilter
    - shard_key::QdrantShardKeySelector
"""
Base.@kwdef mutable struct QdrantDeletePayload <: OpenAPI.APIModel
    keys::Union{Nothing, Vector{String}} = nothing
    points::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantExtendedPointId} }
    filter = nothing # spec type: Union{ Nothing, QdrantFilter }
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKeySelector }

    function QdrantDeletePayload(keys, points, filter, shard_key, )
        OpenAPI.validate_property(QdrantDeletePayload, Symbol("keys"), keys)
        OpenAPI.validate_property(QdrantDeletePayload, Symbol("points"), points)
        OpenAPI.validate_property(QdrantDeletePayload, Symbol("filter"), filter)
        OpenAPI.validate_property(QdrantDeletePayload, Symbol("shard_key"), shard_key)
        return new(keys, points, filter, shard_key, )
    end
end # type QdrantDeletePayload

const _property_types_QdrantDeletePayload = Dict{Symbol,String}(Symbol("keys")=>"Vector{String}", Symbol("points")=>"Vector{QdrantExtendedPointId}", Symbol("filter")=>"QdrantFilter", Symbol("shard_key")=>"QdrantShardKeySelector", )
OpenAPI.property_type(::Type{ QdrantDeletePayload }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantDeletePayload[name]))}

function check_required(o::QdrantDeletePayload)
    o.keys === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantDeletePayload }, name::Symbol, val)
end
