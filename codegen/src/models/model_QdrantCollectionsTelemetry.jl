# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CollectionsTelemetry

    QdrantCollectionsTelemetry(;
        number_of_collections=nothing,
        collections=nothing,
    )

    - number_of_collections::Int64
    - collections::Vector{QdrantCollectionTelemetryEnum}
"""
Base.@kwdef mutable struct QdrantCollectionsTelemetry <: OpenAPI.APIModel
    number_of_collections::Union{Nothing, Int64} = nothing
    collections::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantCollectionTelemetryEnum} }

    function QdrantCollectionsTelemetry(number_of_collections, collections, )
        OpenAPI.validate_property(QdrantCollectionsTelemetry, Symbol("number_of_collections"), number_of_collections)
        OpenAPI.validate_property(QdrantCollectionsTelemetry, Symbol("collections"), collections)
        return new(number_of_collections, collections, )
    end
end # type QdrantCollectionsTelemetry

const _property_types_QdrantCollectionsTelemetry = Dict{Symbol,String}(Symbol("number_of_collections")=>"Int64", Symbol("collections")=>"Vector{QdrantCollectionTelemetryEnum}", )
OpenAPI.property_type(::Type{ QdrantCollectionsTelemetry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantCollectionsTelemetry[name]))}

function check_required(o::QdrantCollectionsTelemetry)
    o.number_of_collections === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantCollectionsTelemetry }, name::Symbol, val)
    if name === Symbol("number_of_collections")
        OpenAPI.validate_param(name, "QdrantCollectionsTelemetry", :format, val, "uint")
    end
    if name === Symbol("number_of_collections")
        OpenAPI.validate_param(name, "QdrantCollectionsTelemetry", :minimum, val, 0, false)
    end
end
