# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SegmentConfig

    QdrantSegmentConfig(;
        vector_data=nothing,
        sparse_vector_data=nothing,
        payload_storage_type=nothing,
    )

    - vector_data::Dict{String, QdrantVectorDataConfig}
    - sparse_vector_data::Dict{String, QdrantSparseVectorDataConfig}
    - payload_storage_type::QdrantPayloadStorageType
"""
Base.@kwdef mutable struct QdrantSegmentConfig <: OpenAPI.APIModel
    vector_data::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, QdrantVectorDataConfig} }
    sparse_vector_data::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, QdrantSparseVectorDataConfig} }
    payload_storage_type = nothing # spec type: Union{ Nothing, QdrantPayloadStorageType }

    function QdrantSegmentConfig(vector_data, sparse_vector_data, payload_storage_type, )
        OpenAPI.validate_property(QdrantSegmentConfig, Symbol("vector_data"), vector_data)
        OpenAPI.validate_property(QdrantSegmentConfig, Symbol("sparse_vector_data"), sparse_vector_data)
        OpenAPI.validate_property(QdrantSegmentConfig, Symbol("payload_storage_type"), payload_storage_type)
        return new(vector_data, sparse_vector_data, payload_storage_type, )
    end
end # type QdrantSegmentConfig

const _property_types_QdrantSegmentConfig = Dict{Symbol,String}(Symbol("vector_data")=>"Dict{String, QdrantVectorDataConfig}", Symbol("sparse_vector_data")=>"Dict{String, QdrantSparseVectorDataConfig}", Symbol("payload_storage_type")=>"QdrantPayloadStorageType", )
OpenAPI.property_type(::Type{ QdrantSegmentConfig }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantSegmentConfig[name]))}

function check_required(o::QdrantSegmentConfig)
    o.payload_storage_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantSegmentConfig }, name::Symbol, val)
end
