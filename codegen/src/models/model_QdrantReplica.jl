# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Replica

    QdrantReplica(;
        shard_id=nothing,
        peer_id=nothing,
    )

    - shard_id::Int64
    - peer_id::Int64
"""
Base.@kwdef mutable struct QdrantReplica <: OpenAPI.APIModel
    shard_id::Union{Nothing, Int64} = nothing
    peer_id::Union{Nothing, Int64} = nothing

    function QdrantReplica(shard_id, peer_id, )
        OpenAPI.validate_property(QdrantReplica, Symbol("shard_id"), shard_id)
        OpenAPI.validate_property(QdrantReplica, Symbol("peer_id"), peer_id)
        return new(shard_id, peer_id, )
    end
end # type QdrantReplica

const _property_types_QdrantReplica = Dict{Symbol,String}(Symbol("shard_id")=>"Int64", Symbol("peer_id")=>"Int64", )
OpenAPI.property_type(::Type{ QdrantReplica }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantReplica[name]))}

function check_required(o::QdrantReplica)
    o.shard_id === nothing && (return false)
    o.peer_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantReplica }, name::Symbol, val)
    if name === Symbol("shard_id")
        OpenAPI.validate_param(name, "QdrantReplica", :format, val, "uint32")
    end
    if name === Symbol("shard_id")
        OpenAPI.validate_param(name, "QdrantReplica", :minimum, val, 0, false)
    end
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantReplica", :format, val, "uint64")
    end
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantReplica", :minimum, val, 0, false)
    end
end
