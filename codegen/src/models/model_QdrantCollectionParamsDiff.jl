# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CollectionParamsDiff

    QdrantCollectionParamsDiff(;
        replication_factor=nothing,
        write_consistency_factor=nothing,
        read_fan_out_factor=nothing,
        on_disk_payload=nothing,
    )

    - replication_factor::Int64 : Number of replicas for each shard
    - write_consistency_factor::Int64 : Minimal number successful responses from replicas to consider operation successful
    - read_fan_out_factor::Int64 : Fan-out every read request to these many additional remote nodes (and return first available response)
    - on_disk_payload::Bool : If true - point&#39;s payload will not be stored in memory. It will be read from the disk every time it is requested. This setting saves RAM by (slightly) increasing the response time. Note: those payload values that are involved in filtering and are indexed - remain in RAM.
"""
Base.@kwdef mutable struct QdrantCollectionParamsDiff <: OpenAPI.APIModel
    replication_factor::Union{Nothing, Int64} = nothing
    write_consistency_factor::Union{Nothing, Int64} = nothing
    read_fan_out_factor::Union{Nothing, Int64} = nothing
    on_disk_payload::Union{Nothing, Bool} = nothing

    function QdrantCollectionParamsDiff(replication_factor, write_consistency_factor, read_fan_out_factor, on_disk_payload, )
        OpenAPI.validate_property(QdrantCollectionParamsDiff, Symbol("replication_factor"), replication_factor)
        OpenAPI.validate_property(QdrantCollectionParamsDiff, Symbol("write_consistency_factor"), write_consistency_factor)
        OpenAPI.validate_property(QdrantCollectionParamsDiff, Symbol("read_fan_out_factor"), read_fan_out_factor)
        OpenAPI.validate_property(QdrantCollectionParamsDiff, Symbol("on_disk_payload"), on_disk_payload)
        return new(replication_factor, write_consistency_factor, read_fan_out_factor, on_disk_payload, )
    end
end # type QdrantCollectionParamsDiff

const _property_types_QdrantCollectionParamsDiff = Dict{Symbol,String}(Symbol("replication_factor")=>"Int64", Symbol("write_consistency_factor")=>"Int64", Symbol("read_fan_out_factor")=>"Int64", Symbol("on_disk_payload")=>"Bool", )
OpenAPI.property_type(::Type{ QdrantCollectionParamsDiff }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantCollectionParamsDiff[name]))}

function check_required(o::QdrantCollectionParamsDiff)
    true
end

function OpenAPI.validate_property(::Type{ QdrantCollectionParamsDiff }, name::Symbol, val)
    if name === Symbol("replication_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParamsDiff", :format, val, "uint32")
    end
    if name === Symbol("replication_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParamsDiff", :minimum, val, 1, false)
    end
    if name === Symbol("write_consistency_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParamsDiff", :format, val, "uint32")
    end
    if name === Symbol("write_consistency_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParamsDiff", :minimum, val, 1, false)
    end
    if name === Symbol("read_fan_out_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParamsDiff", :format, val, "uint32")
    end
    if name === Symbol("read_fan_out_factor")
        OpenAPI.validate_param(name, "QdrantCollectionParamsDiff", :minimum, val, 0, false)
    end
end
