# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CollectionClusterInfo
Current clustering distribution for the collection

    QdrantCollectionClusterInfo(;
        peer_id=nothing,
        shard_count=nothing,
        local_shards=nothing,
        remote_shards=nothing,
        shard_transfers=nothing,
    )

    - peer_id::Int64 : ID of this peer
    - shard_count::Int64 : Total number of shards
    - local_shards::Vector{QdrantLocalShardInfo} : Local shards
    - remote_shards::Vector{QdrantRemoteShardInfo} : Remote shards
    - shard_transfers::Vector{QdrantShardTransferInfo} : Shard transfers
"""
Base.@kwdef mutable struct QdrantCollectionClusterInfo <: OpenAPI.APIModel
    peer_id::Union{Nothing, Int64} = nothing
    shard_count::Union{Nothing, Int64} = nothing
    local_shards::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantLocalShardInfo} }
    remote_shards::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantRemoteShardInfo} }
    shard_transfers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantShardTransferInfo} }

    function QdrantCollectionClusterInfo(peer_id, shard_count, local_shards, remote_shards, shard_transfers, )
        OpenAPI.validate_property(QdrantCollectionClusterInfo, Symbol("peer_id"), peer_id)
        OpenAPI.validate_property(QdrantCollectionClusterInfo, Symbol("shard_count"), shard_count)
        OpenAPI.validate_property(QdrantCollectionClusterInfo, Symbol("local_shards"), local_shards)
        OpenAPI.validate_property(QdrantCollectionClusterInfo, Symbol("remote_shards"), remote_shards)
        OpenAPI.validate_property(QdrantCollectionClusterInfo, Symbol("shard_transfers"), shard_transfers)
        return new(peer_id, shard_count, local_shards, remote_shards, shard_transfers, )
    end
end # type QdrantCollectionClusterInfo

const _property_types_QdrantCollectionClusterInfo = Dict{Symbol,String}(Symbol("peer_id")=>"Int64", Symbol("shard_count")=>"Int64", Symbol("local_shards")=>"Vector{QdrantLocalShardInfo}", Symbol("remote_shards")=>"Vector{QdrantRemoteShardInfo}", Symbol("shard_transfers")=>"Vector{QdrantShardTransferInfo}", )
OpenAPI.property_type(::Type{ QdrantCollectionClusterInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantCollectionClusterInfo[name]))}

function check_required(o::QdrantCollectionClusterInfo)
    o.peer_id === nothing && (return false)
    o.shard_count === nothing && (return false)
    o.local_shards === nothing && (return false)
    o.remote_shards === nothing && (return false)
    o.shard_transfers === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantCollectionClusterInfo }, name::Symbol, val)
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantCollectionClusterInfo", :format, val, "uint64")
    end
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantCollectionClusterInfo", :minimum, val, 0, false)
    end
    if name === Symbol("shard_count")
        OpenAPI.validate_param(name, "QdrantCollectionClusterInfo", :format, val, "uint")
    end
    if name === Symbol("shard_count")
        OpenAPI.validate_param(name, "QdrantCollectionClusterInfo", :minimum, val, 0, false)
    end
end
