# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AppFeaturesTelemetry

    QdrantAppFeaturesTelemetry(;
        debug=nothing,
        web_feature=nothing,
        service_debug_feature=nothing,
        recovery_mode=nothing,
    )

    - debug::Bool
    - web_feature::Bool
    - service_debug_feature::Bool
    - recovery_mode::Bool
"""
Base.@kwdef mutable struct QdrantAppFeaturesTelemetry <: OpenAPI.APIModel
    debug::Union{Nothing, Bool} = nothing
    web_feature::Union{Nothing, Bool} = nothing
    service_debug_feature::Union{Nothing, Bool} = nothing
    recovery_mode::Union{Nothing, Bool} = nothing

    function QdrantAppFeaturesTelemetry(debug, web_feature, service_debug_feature, recovery_mode, )
        OpenAPI.validate_property(QdrantAppFeaturesTelemetry, Symbol("debug"), debug)
        OpenAPI.validate_property(QdrantAppFeaturesTelemetry, Symbol("web_feature"), web_feature)
        OpenAPI.validate_property(QdrantAppFeaturesTelemetry, Symbol("service_debug_feature"), service_debug_feature)
        OpenAPI.validate_property(QdrantAppFeaturesTelemetry, Symbol("recovery_mode"), recovery_mode)
        return new(debug, web_feature, service_debug_feature, recovery_mode, )
    end
end # type QdrantAppFeaturesTelemetry

const _property_types_QdrantAppFeaturesTelemetry = Dict{Symbol,String}(Symbol("debug")=>"Bool", Symbol("web_feature")=>"Bool", Symbol("service_debug_feature")=>"Bool", Symbol("recovery_mode")=>"Bool", )
OpenAPI.property_type(::Type{ QdrantAppFeaturesTelemetry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantAppFeaturesTelemetry[name]))}

function check_required(o::QdrantAppFeaturesTelemetry)
    o.debug === nothing && (return false)
    o.web_feature === nothing && (return false)
    o.service_debug_feature === nothing && (return false)
    o.recovery_mode === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantAppFeaturesTelemetry }, name::Symbol, val)
end
