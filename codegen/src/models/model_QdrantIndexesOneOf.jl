# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Indexes_oneOf
Do not use any index, scan whole vector collection during search. Guarantee 100% precision, but may be time consuming on large collections.

    QdrantIndexesOneOf(;
        type=nothing,
        options=nothing,
    )

    - type::String
    - options::Any
"""
Base.@kwdef mutable struct QdrantIndexesOneOf <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    options::Union{Nothing, Any} = nothing

    function QdrantIndexesOneOf(type, options, )
        OpenAPI.validate_property(QdrantIndexesOneOf, Symbol("type"), type)
        OpenAPI.validate_property(QdrantIndexesOneOf, Symbol("options"), options)
        return new(type, options, )
    end
end # type QdrantIndexesOneOf

const _property_types_QdrantIndexesOneOf = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("options")=>"Any", )
OpenAPI.property_type(::Type{ QdrantIndexesOneOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantIndexesOneOf[name]))}

function check_required(o::QdrantIndexesOneOf)
    o.type === nothing && (return false)
    o.options === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantIndexesOneOf }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "QdrantIndexesOneOf", :enum, val, ["plain"])
    end
end
