# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VectorParams
Params of single vector data storage

    QdrantVectorParams(;
        size=nothing,
        distance=nothing,
        hnsw_config=nothing,
        quantization_config=nothing,
        on_disk=nothing,
    )

    - size::Int64 : Size of a vectors used
    - distance::QdrantDistance
    - hnsw_config::QdrantHnswConfigDiff
    - quantization_config::QdrantQuantizationConfig
    - on_disk::Bool : If true, vectors are served from disk, improving RAM usage at the cost of latency Default: false
"""
Base.@kwdef mutable struct QdrantVectorParams <: OpenAPI.APIModel
    size::Union{Nothing, Int64} = nothing
    distance = nothing # spec type: Union{ Nothing, QdrantDistance }
    hnsw_config = nothing # spec type: Union{ Nothing, QdrantHnswConfigDiff }
    quantization_config = nothing # spec type: Union{ Nothing, QdrantQuantizationConfig }
    on_disk::Union{Nothing, Bool} = nothing

    function QdrantVectorParams(size, distance, hnsw_config, quantization_config, on_disk, )
        OpenAPI.validate_property(QdrantVectorParams, Symbol("size"), size)
        OpenAPI.validate_property(QdrantVectorParams, Symbol("distance"), distance)
        OpenAPI.validate_property(QdrantVectorParams, Symbol("hnsw_config"), hnsw_config)
        OpenAPI.validate_property(QdrantVectorParams, Symbol("quantization_config"), quantization_config)
        OpenAPI.validate_property(QdrantVectorParams, Symbol("on_disk"), on_disk)
        return new(size, distance, hnsw_config, quantization_config, on_disk, )
    end
end # type QdrantVectorParams

const _property_types_QdrantVectorParams = Dict{Symbol,String}(Symbol("size")=>"Int64", Symbol("distance")=>"QdrantDistance", Symbol("hnsw_config")=>"QdrantHnswConfigDiff", Symbol("quantization_config")=>"QdrantQuantizationConfig", Symbol("on_disk")=>"Bool", )
OpenAPI.property_type(::Type{ QdrantVectorParams }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantVectorParams[name]))}

function check_required(o::QdrantVectorParams)
    o.size === nothing && (return false)
    o.distance === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantVectorParams }, name::Symbol, val)
    if name === Symbol("size")
        OpenAPI.validate_param(name, "QdrantVectorParams", :format, val, "uint64")
    end
    if name === Symbol("size")
        OpenAPI.validate_param(name, "QdrantVectorParams", :minimum, val, 1, false)
    end
end
