# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RemoteShardTelemetry

    QdrantRemoteShardTelemetry(;
        shard_id=nothing,
        peer_id=nothing,
        searches=nothing,
        updates=nothing,
    )

    - shard_id::Int64
    - peer_id::Int64
    - searches::QdrantOperationDurationStatistics
    - updates::QdrantOperationDurationStatistics
"""
Base.@kwdef mutable struct QdrantRemoteShardTelemetry <: OpenAPI.APIModel
    shard_id::Union{Nothing, Int64} = nothing
    peer_id::Union{Nothing, Int64} = nothing
    searches = nothing # spec type: Union{ Nothing, QdrantOperationDurationStatistics }
    updates = nothing # spec type: Union{ Nothing, QdrantOperationDurationStatistics }

    function QdrantRemoteShardTelemetry(shard_id, peer_id, searches, updates, )
        OpenAPI.validate_property(QdrantRemoteShardTelemetry, Symbol("shard_id"), shard_id)
        OpenAPI.validate_property(QdrantRemoteShardTelemetry, Symbol("peer_id"), peer_id)
        OpenAPI.validate_property(QdrantRemoteShardTelemetry, Symbol("searches"), searches)
        OpenAPI.validate_property(QdrantRemoteShardTelemetry, Symbol("updates"), updates)
        return new(shard_id, peer_id, searches, updates, )
    end
end # type QdrantRemoteShardTelemetry

const _property_types_QdrantRemoteShardTelemetry = Dict{Symbol,String}(Symbol("shard_id")=>"Int64", Symbol("peer_id")=>"Int64", Symbol("searches")=>"QdrantOperationDurationStatistics", Symbol("updates")=>"QdrantOperationDurationStatistics", )
OpenAPI.property_type(::Type{ QdrantRemoteShardTelemetry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantRemoteShardTelemetry[name]))}

function check_required(o::QdrantRemoteShardTelemetry)
    o.shard_id === nothing && (return false)
    o.searches === nothing && (return false)
    o.updates === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantRemoteShardTelemetry }, name::Symbol, val)
    if name === Symbol("shard_id")
        OpenAPI.validate_param(name, "QdrantRemoteShardTelemetry", :format, val, "uint32")
    end
    if name === Symbol("shard_id")
        OpenAPI.validate_param(name, "QdrantRemoteShardTelemetry", :minimum, val, 0, false)
    end
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantRemoteShardTelemetry", :format, val, "uint64")
    end
    if name === Symbol("peer_id")
        OpenAPI.validate_param(name, "QdrantRemoteShardTelemetry", :minimum, val, 0, false)
    end
end
