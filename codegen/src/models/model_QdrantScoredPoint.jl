# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ScoredPoint
Search result

    QdrantScoredPoint(;
        id=nothing,
        version=nothing,
        score=nothing,
        payload=nothing,
        vector=nothing,
        shard_key=nothing,
    )

    - id::QdrantExtendedPointId
    - version::Int64 : Point version
    - score::Float32 : Points vector distance to the query vector
    - payload::Dict{String, Any}
    - vector::QdrantVectorStruct
    - shard_key::QdrantShardKey
"""
Base.@kwdef mutable struct QdrantScoredPoint <: OpenAPI.APIModel
    id = nothing # spec type: Union{ Nothing, QdrantExtendedPointId }
    version::Union{Nothing, Int64} = nothing
    score::Union{Nothing, Float32} = nothing
    payload::Union{Nothing, Dict{String, Any}} = nothing
    vector = nothing # spec type: Union{ Nothing, QdrantVectorStruct }
    shard_key = nothing # spec type: Union{ Nothing, QdrantShardKey }

    function QdrantScoredPoint(id, version, score, payload, vector, shard_key, )
        OpenAPI.validate_property(QdrantScoredPoint, Symbol("id"), id)
        OpenAPI.validate_property(QdrantScoredPoint, Symbol("version"), version)
        OpenAPI.validate_property(QdrantScoredPoint, Symbol("score"), score)
        OpenAPI.validate_property(QdrantScoredPoint, Symbol("payload"), payload)
        OpenAPI.validate_property(QdrantScoredPoint, Symbol("vector"), vector)
        OpenAPI.validate_property(QdrantScoredPoint, Symbol("shard_key"), shard_key)
        return new(id, version, score, payload, vector, shard_key, )
    end
end # type QdrantScoredPoint

const _property_types_QdrantScoredPoint = Dict{Symbol,String}(Symbol("id")=>"QdrantExtendedPointId", Symbol("version")=>"Int64", Symbol("score")=>"Float32", Symbol("payload")=>"Dict{String, Any}", Symbol("vector")=>"QdrantVectorStruct", Symbol("shard_key")=>"QdrantShardKey", )
OpenAPI.property_type(::Type{ QdrantScoredPoint }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantScoredPoint[name]))}

function check_required(o::QdrantScoredPoint)
    o.id === nothing && (return false)
    o.version === nothing && (return false)
    o.score === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantScoredPoint }, name::Symbol, val)
    if name === Symbol("version")
        OpenAPI.validate_param(name, "QdrantScoredPoint", :format, val, "uint64")
    end
    if name === Symbol("version")
        OpenAPI.validate_param(name, "QdrantScoredPoint", :minimum, val, 0, false)
    end
    if name === Symbol("score")
        OpenAPI.validate_param(name, "QdrantScoredPoint", :format, val, "float")
    end
end
