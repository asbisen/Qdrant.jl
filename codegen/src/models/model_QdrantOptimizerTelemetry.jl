# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OptimizerTelemetry

    QdrantOptimizerTelemetry(;
        status=nothing,
        optimizations=nothing,
        log=nothing,
    )

    - status::QdrantOptimizersStatus
    - optimizations::QdrantOperationDurationStatistics
    - log::Vector{QdrantTrackerTelemetry}
"""
Base.@kwdef mutable struct QdrantOptimizerTelemetry <: OpenAPI.APIModel
    status = nothing # spec type: Union{ Nothing, QdrantOptimizersStatus }
    optimizations = nothing # spec type: Union{ Nothing, QdrantOperationDurationStatistics }
    log::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QdrantTrackerTelemetry} }

    function QdrantOptimizerTelemetry(status, optimizations, log, )
        OpenAPI.validate_property(QdrantOptimizerTelemetry, Symbol("status"), status)
        OpenAPI.validate_property(QdrantOptimizerTelemetry, Symbol("optimizations"), optimizations)
        OpenAPI.validate_property(QdrantOptimizerTelemetry, Symbol("log"), log)
        return new(status, optimizations, log, )
    end
end # type QdrantOptimizerTelemetry

const _property_types_QdrantOptimizerTelemetry = Dict{Symbol,String}(Symbol("status")=>"QdrantOptimizersStatus", Symbol("optimizations")=>"QdrantOperationDurationStatistics", Symbol("log")=>"Vector{QdrantTrackerTelemetry}", )
OpenAPI.property_type(::Type{ QdrantOptimizerTelemetry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantOptimizerTelemetry[name]))}

function check_required(o::QdrantOptimizerTelemetry)
    o.status === nothing && (return false)
    o.optimizations === nothing && (return false)
    o.log === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantOptimizerTelemetry }, name::Symbol, val)
end
