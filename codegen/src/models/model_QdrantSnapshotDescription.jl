# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SnapshotDescription

    QdrantSnapshotDescription(;
        name=nothing,
        creation_time=nothing,
        size=nothing,
    )

    - name::String
    - creation_time::String
    - size::Int64
"""
Base.@kwdef mutable struct QdrantSnapshotDescription <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    creation_time::Union{Nothing, String} = nothing
    size::Union{Nothing, Int64} = nothing

    function QdrantSnapshotDescription(name, creation_time, size, )
        OpenAPI.validate_property(QdrantSnapshotDescription, Symbol("name"), name)
        OpenAPI.validate_property(QdrantSnapshotDescription, Symbol("creation_time"), creation_time)
        OpenAPI.validate_property(QdrantSnapshotDescription, Symbol("size"), size)
        return new(name, creation_time, size, )
    end
end # type QdrantSnapshotDescription

const _property_types_QdrantSnapshotDescription = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("creation_time")=>"String", Symbol("size")=>"Int64", )
OpenAPI.property_type(::Type{ QdrantSnapshotDescription }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QdrantSnapshotDescription[name]))}

function check_required(o::QdrantSnapshotDescription)
    o.name === nothing && (return false)
    o.size === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QdrantSnapshotDescription }, name::Symbol, val)
    if name === Symbol("creation_time")
        OpenAPI.validate_param(name, "QdrantSnapshotDescription", :format, val, "partial-date-time")
    end
    if name === Symbol("size")
        OpenAPI.validate_param(name, "QdrantSnapshotDescription", :format, val, "uint64")
    end
    if name === Symbol("size")
        OpenAPI.validate_param(name, "QdrantSnapshotDescription", :minimum, val, 0, false)
    end
end
