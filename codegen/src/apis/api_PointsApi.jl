# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PointsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PointsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PointsApi }) = "http://localhost:6333"

const _returntypes_batch_update_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantBatchUpdate200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_batch_update(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_update_operations=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_batch_update_PointsApi, "/collections/{collection_name}/points/batch", ["api-key", "bearerAuth", ], qdrant_update_operations)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering; style="form", is_explode=true)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Batch update points

Apply a series of update operations for points, vectors and payloads

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_update_operations::QdrantUpdateOperations

Return: QdrantBatchUpdate200Response, OpenAPI.Clients.ApiResponse
"""
function batch_update(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_update_operations=nothing, _mediaType=nothing)
    _ctx = _oacinternal_batch_update(_api, collection_name; wait=wait, ordering=ordering, qdrant_update_operations=qdrant_update_operations, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function batch_update(_api::PointsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_update_operations=nothing, _mediaType=nothing)
    _ctx = _oacinternal_batch_update(_api, collection_name; wait=wait, ordering=ordering, qdrant_update_operations=qdrant_update_operations, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_clear_payload_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_clear_payload(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_points_selector=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_clear_payload_PointsApi, "/collections/{collection_name}/points/payload/clear", ["api-key", "bearerAuth", ], qdrant_points_selector)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering; style="form", is_explode=true)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Clear payload

Remove all payload for specified points

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_points_selector::QdrantPointsSelector

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function clear_payload(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_points_selector=nothing, _mediaType=nothing)
    _ctx = _oacinternal_clear_payload(_api, collection_name; wait=wait, ordering=ordering, qdrant_points_selector=qdrant_points_selector, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function clear_payload(_api::PointsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_points_selector=nothing, _mediaType=nothing)
    _ctx = _oacinternal_clear_payload(_api, collection_name; wait=wait, ordering=ordering, qdrant_points_selector=qdrant_points_selector, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_count_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCountPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_count_points(_api::PointsApi, collection_name::String; timeout=nothing, qdrant_count_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "count_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_count_points_PointsApi, "/collections/{collection_name}/points/count", ["api-key", "bearerAuth", ], qdrant_count_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Count points

Count points which matches given filtering condition

Params:
- collection_name::String (required)
- timeout::Int64
- qdrant_count_request::QdrantCountRequest

Return: QdrantCountPoints200Response, OpenAPI.Clients.ApiResponse
"""
function count_points(_api::PointsApi, collection_name::String; timeout=nothing, qdrant_count_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_count_points(_api, collection_name; timeout=timeout, qdrant_count_request=qdrant_count_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function count_points(_api::PointsApi, response_stream::Channel, collection_name::String; timeout=nothing, qdrant_count_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_count_points(_api, collection_name; timeout=timeout, qdrant_count_request=qdrant_count_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_payload_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_payload(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_delete_payload=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_payload_PointsApi, "/collections/{collection_name}/points/payload/delete", ["api-key", "bearerAuth", ], qdrant_delete_payload)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering; style="form", is_explode=true)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete payload

Delete specified key payload for points

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_delete_payload::QdrantDeletePayload

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function delete_payload(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_delete_payload=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_payload(_api, collection_name; wait=wait, ordering=ordering, qdrant_delete_payload=qdrant_delete_payload, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_payload(_api::PointsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_delete_payload=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_payload(_api, collection_name; wait=wait, ordering=ordering, qdrant_delete_payload=qdrant_delete_payload, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_points(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_points_selector=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_points_PointsApi, "/collections/{collection_name}/points/delete", ["api-key", "bearerAuth", ], qdrant_points_selector)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering; style="form", is_explode=true)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete points

Delete points

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_points_selector::QdrantPointsSelector

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function delete_points(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_points_selector=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_points(_api, collection_name; wait=wait, ordering=ordering, qdrant_points_selector=qdrant_points_selector, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_points(_api::PointsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_points_selector=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_points(_api, collection_name; wait=wait, ordering=ordering, qdrant_points_selector=qdrant_points_selector, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_vectors_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_vectors(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_delete_vectors=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_vectors_PointsApi, "/collections/{collection_name}/points/vectors/delete", ["api-key", "bearerAuth", ], qdrant_delete_vectors)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering; style="form", is_explode=true)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete vectors

Delete named vectors from the given points.

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_delete_vectors::QdrantDeleteVectors

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function delete_vectors(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_delete_vectors=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_vectors(_api, collection_name; wait=wait, ordering=ordering, qdrant_delete_vectors=qdrant_delete_vectors, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_vectors(_api::PointsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_delete_vectors=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_vectors(_api, collection_name; wait=wait, ordering=ordering, qdrant_delete_vectors=qdrant_delete_vectors, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_discover_batch_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantSearchBatchPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_discover_batch_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_discover_request_batch=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "discover_batch_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_discover_batch_points_PointsApi, "/collections/{collection_name}/points/discover/batch", ["api-key", "bearerAuth", ], qdrant_discover_request_batch)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Discover batch points

Look for points based on target and/or positive and negative example pairs, in batch.

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_discover_request_batch::QdrantDiscoverRequestBatch

Return: QdrantSearchBatchPoints200Response, OpenAPI.Clients.ApiResponse
"""
function discover_batch_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_discover_request_batch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_discover_batch_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_discover_request_batch=qdrant_discover_request_batch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function discover_batch_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_discover_request_batch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_discover_batch_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_discover_request_batch=qdrant_discover_request_batch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_discover_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantSearchPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_discover_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_discover_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "discover_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_discover_points_PointsApi, "/collections/{collection_name}/points/discover", ["api-key", "bearerAuth", ], qdrant_discover_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Discover points

Use context and a target to find the most similar points to the target, constrained by the context. When using only the context (without a target), a special search - called context search - is performed where pairs of points are used to generate a loss that guides the search towards the zone where most positive examples overlap. This means that the score minimizes the scenario of finding a point closer to a negative than to a positive part of a pair. Since the score of a context relates to loss, the maximum score a point can get is 0.0, and it becomes normal that many points can have a score of 0.0. When using target (with or without context), the score behaves a little different: The  integer part of the score represents the rank with respect to the context, while the decimal part of the score relates to the distance to the target. The context part of the score for  each pair is calculated +1 if the point is closer to a positive than to a negative part of a pair,  and -1 otherwise. 

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_discover_request::QdrantDiscoverRequest

Return: QdrantSearchPoints200Response, OpenAPI.Clients.ApiResponse
"""
function discover_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_discover_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_discover_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_discover_request=qdrant_discover_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function discover_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_discover_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_discover_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_discover_request=qdrant_discover_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_point_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantGetPoint200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_point(_api::PointsApi, collection_name::String, id::QdrantExtendedPointId; consistency=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_point_PointsApi, "/collections/{collection_name}/points/{id}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type QdrantExtendedPointId
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get point

Retrieve full information of single point by id

Params:
- collection_name::String (required)
- id::QdrantExtendedPointId (required)
- consistency::QdrantReadConsistency

Return: QdrantGetPoint200Response, OpenAPI.Clients.ApiResponse
"""
function get_point(_api::PointsApi, collection_name::String, id::QdrantExtendedPointId; consistency=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_point(_api, collection_name, id; consistency=consistency, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_point(_api::PointsApi, response_stream::Channel, collection_name::String, id::QdrantExtendedPointId; consistency=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_point(_api, collection_name, id; consistency=consistency, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantGetPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_point_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "get_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_points_PointsApi, "/collections/{collection_name}/points", ["api-key", "bearerAuth", ], qdrant_point_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Get points

Retrieve multiple points by specified IDs

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_point_request::QdrantPointRequest

Return: QdrantGetPoints200Response, OpenAPI.Clients.ApiResponse
"""
function get_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_point_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_point_request=qdrant_point_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_point_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_point_request=qdrant_point_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_overwrite_payload_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_overwrite_payload(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_set_payload=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_overwrite_payload_PointsApi, "/collections/{collection_name}/points/payload", ["api-key", "bearerAuth", ], qdrant_set_payload)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering; style="form", is_explode=true)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Overwrite payload

Replace full payload of points with new one

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_set_payload::QdrantSetPayload

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function overwrite_payload(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_set_payload=nothing, _mediaType=nothing)
    _ctx = _oacinternal_overwrite_payload(_api, collection_name; wait=wait, ordering=ordering, qdrant_set_payload=qdrant_set_payload, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function overwrite_payload(_api::PointsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_set_payload=nothing, _mediaType=nothing)
    _ctx = _oacinternal_overwrite_payload(_api, collection_name; wait=wait, ordering=ordering, qdrant_set_payload=qdrant_set_payload, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_query_batch_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantQueryBatchPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_query_batch_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_query_request_batch=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "query_batch_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_query_batch_points_PointsApi, "/collections/{collection_name}/points/query/batch", ["api-key", "bearerAuth", ], qdrant_query_request_batch)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Query points in batch

Universally query points in batch. This endpoint covers all capabilities of search, recommend, discover, filters. But also enables hybrid and multi-stage queries.

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_query_request_batch::QdrantQueryRequestBatch

Return: QdrantQueryBatchPoints200Response, OpenAPI.Clients.ApiResponse
"""
function query_batch_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_query_request_batch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_batch_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_query_request_batch=qdrant_query_request_batch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function query_batch_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_query_request_batch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_batch_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_query_request_batch=qdrant_query_request_batch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_query_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantQueryPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_query_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_query_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "query_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_query_points_PointsApi, "/collections/{collection_name}/points/query", ["api-key", "bearerAuth", ], qdrant_query_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Query points

Universally query points. This endpoint covers all capabilities of search, recommend, discover, filters. But also enables hybrid and multi-stage queries.

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_query_request::QdrantQueryRequest

Return: QdrantQueryPoints200Response, OpenAPI.Clients.ApiResponse
"""
function query_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_query_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_query_request=qdrant_query_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function query_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_query_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_query_request=qdrant_query_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_query_points_groups_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantSearchPointGroups200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_query_points_groups(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_query_groups_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "query_points_groups", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_query_points_groups_PointsApi, "/collections/{collection_name}/points/query/groups", ["api-key", "bearerAuth", ], qdrant_query_groups_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Query points, grouped by a given payload field

Universally query points, grouped by a given payload field

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_query_groups_request::QdrantQueryGroupsRequest

Return: QdrantSearchPointGroups200Response, OpenAPI.Clients.ApiResponse
"""
function query_points_groups(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_query_groups_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_points_groups(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_query_groups_request=qdrant_query_groups_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function query_points_groups(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_query_groups_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_points_groups(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_query_groups_request=qdrant_query_groups_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recommend_batch_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantSearchBatchPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recommend_batch_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_recommend_request_batch=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "recommend_batch_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_recommend_batch_points_PointsApi, "/collections/{collection_name}/points/recommend/batch", ["api-key", "bearerAuth", ], qdrant_recommend_request_batch)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recommend batch points

Look for the points which are closer to stored positive examples and at the same time further to negative examples.

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_recommend_request_batch::QdrantRecommendRequestBatch

Return: QdrantSearchBatchPoints200Response, OpenAPI.Clients.ApiResponse
"""
function recommend_batch_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_recommend_request_batch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recommend_batch_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_recommend_request_batch=qdrant_recommend_request_batch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recommend_batch_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_recommend_request_batch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recommend_batch_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_recommend_request_batch=qdrant_recommend_request_batch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recommend_point_groups_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantSearchPointGroups200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recommend_point_groups(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_recommend_groups_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "recommend_point_groups", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_recommend_point_groups_PointsApi, "/collections/{collection_name}/points/recommend/groups", ["api-key", "bearerAuth", ], qdrant_recommend_groups_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recommend point groups

Look for the points which are closer to stored positive examples and at the same time further to negative examples, grouped by a given payload field.

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_recommend_groups_request::QdrantRecommendGroupsRequest

Return: QdrantSearchPointGroups200Response, OpenAPI.Clients.ApiResponse
"""
function recommend_point_groups(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_recommend_groups_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recommend_point_groups(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_recommend_groups_request=qdrant_recommend_groups_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recommend_point_groups(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_recommend_groups_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recommend_point_groups(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_recommend_groups_request=qdrant_recommend_groups_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recommend_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantSearchPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recommend_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_recommend_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "recommend_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_recommend_points_PointsApi, "/collections/{collection_name}/points/recommend", ["api-key", "bearerAuth", ], qdrant_recommend_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recommend points

Look for the points which are closer to stored positive examples and at the same time further to negative examples.

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_recommend_request::QdrantRecommendRequest

Return: QdrantSearchPoints200Response, OpenAPI.Clients.ApiResponse
"""
function recommend_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_recommend_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recommend_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_recommend_request=qdrant_recommend_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recommend_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_recommend_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recommend_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_recommend_request=qdrant_recommend_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_scroll_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantScrollPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_scroll_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_scroll_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "scroll_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_scroll_points_PointsApi, "/collections/{collection_name}/points/scroll", ["api-key", "bearerAuth", ], qdrant_scroll_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Scroll points

Scroll request - paginate over all points which matches given filtering condition

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_scroll_request::QdrantScrollRequest

Return: QdrantScrollPoints200Response, OpenAPI.Clients.ApiResponse
"""
function scroll_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_scroll_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_scroll_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_scroll_request=qdrant_scroll_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function scroll_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_scroll_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_scroll_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_scroll_request=qdrant_scroll_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_batch_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantSearchBatchPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_search_batch_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_search_request_batch=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "search_batch_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_batch_points_PointsApi, "/collections/{collection_name}/points/search/batch", ["api-key", "bearerAuth", ], qdrant_search_request_batch)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search batch points

Retrieve by batch the closest points based on vector similarity and given filtering conditions

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_search_request_batch::QdrantSearchRequestBatch

Return: QdrantSearchBatchPoints200Response, OpenAPI.Clients.ApiResponse
"""
function search_batch_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_search_request_batch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_batch_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_search_request_batch=qdrant_search_request_batch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_batch_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_search_request_batch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_batch_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_search_request_batch=qdrant_search_request_batch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_point_groups_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantSearchPointGroups200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_search_point_groups(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_search_groups_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "search_point_groups", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_point_groups_PointsApi, "/collections/{collection_name}/points/search/groups", ["api-key", "bearerAuth", ], qdrant_search_groups_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search point groups

Retrieve closest points based on vector similarity and given filtering conditions, grouped by a given payload field

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_search_groups_request::QdrantSearchGroupsRequest

Return: QdrantSearchPointGroups200Response, OpenAPI.Clients.ApiResponse
"""
function search_point_groups(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_search_groups_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_point_groups(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_search_groups_request=qdrant_search_groups_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_point_groups(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_search_groups_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_point_groups(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_search_groups_request=qdrant_search_groups_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantSearchPoints200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_search_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_search_request=nothing, _mediaType=nothing)
    OpenAPI.validate_param("timeout", "search_points", :minimum, timeout, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_points_PointsApi, "/collections/{collection_name}/points/search", ["api-key", "bearerAuth", ], qdrant_search_request)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "consistency", consistency; style="form", is_explode=true)  # type QdrantReadConsistency
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search points

Retrieve closest points based on vector similarity and given filtering conditions

Params:
- collection_name::String (required)
- consistency::QdrantReadConsistency
- timeout::Int64
- qdrant_search_request::QdrantSearchRequest

Return: QdrantSearchPoints200Response, OpenAPI.Clients.ApiResponse
"""
function search_points(_api::PointsApi, collection_name::String; consistency=nothing, timeout=nothing, qdrant_search_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_search_request=qdrant_search_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_points(_api::PointsApi, response_stream::Channel, collection_name::String; consistency=nothing, timeout=nothing, qdrant_search_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_points(_api, collection_name; consistency=consistency, timeout=timeout, qdrant_search_request=qdrant_search_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_payload_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_set_payload(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_set_payload=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_set_payload_PointsApi, "/collections/{collection_name}/points/payload", ["api-key", "bearerAuth", ], qdrant_set_payload)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering; style="form", is_explode=true)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Set payload

Set payload values for points

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_set_payload::QdrantSetPayload

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function set_payload(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_set_payload=nothing, _mediaType=nothing)
    _ctx = _oacinternal_set_payload(_api, collection_name; wait=wait, ordering=ordering, qdrant_set_payload=qdrant_set_payload, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_payload(_api::PointsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_set_payload=nothing, _mediaType=nothing)
    _ctx = _oacinternal_set_payload(_api, collection_name; wait=wait, ordering=ordering, qdrant_set_payload=qdrant_set_payload, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_vectors_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_update_vectors(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_update_vectors=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_vectors_PointsApi, "/collections/{collection_name}/points/vectors", ["api-key", "bearerAuth", ], qdrant_update_vectors)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering; style="form", is_explode=true)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update vectors

Update specified named vectors on points, keep unspecified vectors intact.

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_update_vectors::QdrantUpdateVectors

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function update_vectors(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_update_vectors=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_vectors(_api, collection_name; wait=wait, ordering=ordering, qdrant_update_vectors=qdrant_update_vectors, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_vectors(_api::PointsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_update_vectors=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_vectors(_api, collection_name; wait=wait, ordering=ordering, qdrant_update_vectors=qdrant_update_vectors, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upsert_points_PointsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_upsert_points(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_point_insert_operations=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_upsert_points_PointsApi, "/collections/{collection_name}/points", ["api-key", "bearerAuth", ], qdrant_point_insert_operations)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering; style="form", is_explode=true)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upsert points

Perform insert + updates on points. If point with given ID already exists - it will be overwritten.

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_point_insert_operations::QdrantPointInsertOperations

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function upsert_points(_api::PointsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_point_insert_operations=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upsert_points(_api, collection_name; wait=wait, ordering=ordering, qdrant_point_insert_operations=qdrant_point_insert_operations, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upsert_points(_api::PointsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_point_insert_operations=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upsert_points(_api, collection_name; wait=wait, ordering=ordering, qdrant_point_insert_operations=qdrant_point_insert_operations, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export batch_update
export clear_payload
export count_points
export delete_payload
export delete_points
export delete_vectors
export discover_batch_points
export discover_points
export get_point
export get_points
export overwrite_payload
export query_batch_points
export query_points
export query_points_groups
export recommend_batch_points
export recommend_point_groups
export recommend_points
export scroll_points
export search_batch_points
export search_point_groups
export search_points
export set_payload
export update_vectors
export upsert_points
