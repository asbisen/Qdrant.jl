# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ServiceApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ServiceApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ServiceApi }) = "http://localhost:6333"

const _returntypes_get_locks_ServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantGetLocks200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_locks(_api::ServiceApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_locks_ServiceApi, "/locks", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get lock options

Get lock options. If write is locked, all write operations and collection creation are forbidden

Params:

Return: QdrantGetLocks200Response, OpenAPI.Clients.ApiResponse
"""
function get_locks(_api::ServiceApi; _mediaType=nothing)
    _ctx = _oacinternal_get_locks(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_locks(_api::ServiceApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_locks(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_healthz_ServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_healthz(_api::ServiceApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_healthz_ServiceApi, "/healthz", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["text/plain", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Kubernetes healthz endpoint

An endpoint for health checking used in Kubernetes.

Params:

Return: String, OpenAPI.Clients.ApiResponse
"""
function healthz(_api::ServiceApi; _mediaType=nothing)
    _ctx = _oacinternal_healthz(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function healthz(_api::ServiceApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_healthz(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_livez_ServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_livez(_api::ServiceApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_livez_ServiceApi, "/livez", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["text/plain", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Kubernetes livez endpoint

An endpoint for health checking used in Kubernetes.

Params:

Return: String, OpenAPI.Clients.ApiResponse
"""
function livez(_api::ServiceApi; _mediaType=nothing)
    _ctx = _oacinternal_livez(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function livez(_api::ServiceApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_livez(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_metrics_ServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_metrics(_api::ServiceApi; anonymize=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_metrics_ServiceApi, "/metrics", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "anonymize", anonymize; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["text/plain", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Collect Prometheus metrics data

Collect metrics data including app info, collections info, cluster info and statistics

Params:
- anonymize::Bool

Return: String, OpenAPI.Clients.ApiResponse
"""
function metrics(_api::ServiceApi; anonymize=nothing, _mediaType=nothing)
    _ctx = _oacinternal_metrics(_api; anonymize=anonymize, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function metrics(_api::ServiceApi, response_stream::Channel; anonymize=nothing, _mediaType=nothing)
    _ctx = _oacinternal_metrics(_api; anonymize=anonymize, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_post_locks_ServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantGetLocks200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_post_locks(_api::ServiceApi; qdrant_locks_option=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_locks_ServiceApi, "/locks", ["api-key", "bearerAuth", ], qdrant_locks_option)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Set lock options

Set lock options. If write is locked, all write operations and collection creation are forbidden. Returns previous lock options

Params:
- qdrant_locks_option::QdrantLocksOption

Return: QdrantGetLocks200Response, OpenAPI.Clients.ApiResponse
"""
function post_locks(_api::ServiceApi; qdrant_locks_option=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_locks(_api; qdrant_locks_option=qdrant_locks_option, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_locks(_api::ServiceApi, response_stream::Channel; qdrant_locks_option=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_locks(_api; qdrant_locks_option=qdrant_locks_option, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_readyz_ServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_readyz(_api::ServiceApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_readyz_ServiceApi, "/readyz", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["text/plain", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Kubernetes readyz endpoint

An endpoint for health checking used in Kubernetes.

Params:

Return: String, OpenAPI.Clients.ApiResponse
"""
function readyz(_api::ServiceApi; _mediaType=nothing)
    _ctx = _oacinternal_readyz(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function readyz(_api::ServiceApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_readyz(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_root_ServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantVersionInfo,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_root(_api::ServiceApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_root_ServiceApi, "/", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns information about the running Qdrant instance

Returns information about the running Qdrant instance like version and commit id

Params:

Return: QdrantVersionInfo, OpenAPI.Clients.ApiResponse
"""
function root(_api::ServiceApi; _mediaType=nothing)
    _ctx = _oacinternal_root(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function root(_api::ServiceApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_root(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_telemetry_ServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantTelemetry200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_telemetry(_api::ServiceApi; anonymize=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_telemetry_ServiceApi, "/telemetry", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "anonymize", anonymize; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Collect telemetry data

Collect telemetry data including app info, system info, collections info, cluster info, configs and statistics

Params:
- anonymize::Bool

Return: QdrantTelemetry200Response, OpenAPI.Clients.ApiResponse
"""
function telemetry(_api::ServiceApi; anonymize=nothing, _mediaType=nothing)
    _ctx = _oacinternal_telemetry(_api; anonymize=anonymize, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function telemetry(_api::ServiceApi, response_stream::Channel; anonymize=nothing, _mediaType=nothing)
    _ctx = _oacinternal_telemetry(_api; anonymize=anonymize, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_locks
export healthz
export livez
export metrics
export post_locks
export readyz
export root
export telemetry
