# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SnapshotsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SnapshotsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SnapshotsApi }) = "http://localhost:6333"

const _returntypes_create_full_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateSnapshot200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_create_full_snapshot(_api::SnapshotsApi; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_full_snapshot_SnapshotsApi, "/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create storage snapshot

Create new snapshot of the whole storage

Params:
- wait::Bool

Return: QdrantCreateSnapshot200Response, OpenAPI.Clients.ApiResponse
"""
function create_full_snapshot(_api::SnapshotsApi; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_full_snapshot(_api; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_full_snapshot(_api::SnapshotsApi, response_stream::Channel; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_full_snapshot(_api; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_shard_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateSnapshot200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_create_shard_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_shard_snapshot_SnapshotsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create shard snapshot

Create new snapshot of a shard for a collection

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- wait::Bool

Return: QdrantCreateSnapshot200Response, OpenAPI.Clients.ApiResponse
"""
function create_shard_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_shard_snapshot(_api, collection_name, shard_id; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_shard_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String, shard_id::Int64; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_shard_snapshot(_api, collection_name, shard_id; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateSnapshot200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_create_snapshot(_api::SnapshotsApi, collection_name::String; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_snapshot_SnapshotsApi, "/collections/{collection_name}/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create collection snapshot

Create new snapshot for a collection

Params:
- collection_name::String (required)
- wait::Bool

Return: QdrantCreateSnapshot200Response, OpenAPI.Clients.ApiResponse
"""
function create_snapshot(_api::SnapshotsApi, collection_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_snapshot(_api, collection_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_snapshot(_api, collection_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_full_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_full_snapshot(_api::SnapshotsApi, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_full_snapshot_SnapshotsApi, "/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete storage snapshot

Delete snapshot of the whole storage

Params:
- snapshot_name::String (required)
- wait::Bool

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function delete_full_snapshot(_api::SnapshotsApi, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_full_snapshot(_api, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_full_snapshot(_api::SnapshotsApi, response_stream::Channel, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_full_snapshot(_api, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_shard_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_shard_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_shard_snapshot_SnapshotsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete shard snapshot

Delete snapshot of a shard for a collection

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- snapshot_name::String (required)
- wait::Bool

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function delete_shard_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_shard_snapshot(_api, collection_name, shard_id, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_shard_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String, shard_id::Int64, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_shard_snapshot(_api, collection_name, shard_id, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_snapshot(_api::SnapshotsApi, collection_name::String, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_snapshot_SnapshotsApi, "/collections/{collection_name}/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete collection snapshot

Delete snapshot for a collection

Params:
- collection_name::String (required)
- snapshot_name::String (required)
- wait::Bool

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function delete_snapshot(_api::SnapshotsApi, collection_name::String, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_snapshot(_api, collection_name, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_snapshot(_api, collection_name, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_full_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_full_snapshot(_api::SnapshotsApi, snapshot_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_full_snapshot_SnapshotsApi, "/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/octet-stream", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download storage snapshot

Download specified snapshot of the whole storage as a file

Params:
- snapshot_name::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_full_snapshot(_api::SnapshotsApi, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_full_snapshot(_api, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_full_snapshot(_api::SnapshotsApi, response_stream::Channel, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_full_snapshot(_api, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_shard_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_shard_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64, snapshot_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_shard_snapshot_SnapshotsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/octet-stream", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download collection snapshot

Download specified snapshot of a shard from a collection as a file

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- snapshot_name::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_shard_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_shard_snapshot(_api, collection_name, shard_id, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_shard_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String, shard_id::Int64, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_shard_snapshot(_api, collection_name, shard_id, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_snapshot(_api::SnapshotsApi, collection_name::String, snapshot_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_snapshot_SnapshotsApi, "/collections/{collection_name}/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/octet-stream", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download collection snapshot

Download specified snapshot from a collection as a file

Params:
- collection_name::String (required)
- snapshot_name::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_snapshot(_api::SnapshotsApi, collection_name::String, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_snapshot(_api, collection_name, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_snapshot(_api, collection_name, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_full_snapshots_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantListSnapshots200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_list_full_snapshots(_api::SnapshotsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_full_snapshots_SnapshotsApi, "/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List of storage snapshots

Get list of snapshots of the whole storage

Params:

Return: QdrantListSnapshots200Response, OpenAPI.Clients.ApiResponse
"""
function list_full_snapshots(_api::SnapshotsApi; _mediaType=nothing)
    _ctx = _oacinternal_list_full_snapshots(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_full_snapshots(_api::SnapshotsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_full_snapshots(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_shard_snapshots_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantListSnapshots200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_list_shard_snapshots(_api::SnapshotsApi, collection_name::String, shard_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_shard_snapshots_SnapshotsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List shards snapshots for a collection

Get list of snapshots for a shard of a collection

Params:
- collection_name::String (required)
- shard_id::Int64 (required)

Return: QdrantListSnapshots200Response, OpenAPI.Clients.ApiResponse
"""
function list_shard_snapshots(_api::SnapshotsApi, collection_name::String, shard_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_shard_snapshots(_api, collection_name, shard_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_shard_snapshots(_api::SnapshotsApi, response_stream::Channel, collection_name::String, shard_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_shard_snapshots(_api, collection_name, shard_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_snapshots_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantListSnapshots200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_list_snapshots(_api::SnapshotsApi, collection_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_snapshots_SnapshotsApi, "/collections/{collection_name}/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List collection snapshots

Get list of snapshots for a collection

Params:
- collection_name::String (required)

Return: QdrantListSnapshots200Response, OpenAPI.Clients.ApiResponse
"""
function list_snapshots(_api::SnapshotsApi, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_list_snapshots(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_snapshots(_api::SnapshotsApi, response_stream::Channel, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_list_snapshots(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recover_from_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recover_from_snapshot(_api::SnapshotsApi, collection_name::String; wait=nothing, qdrant_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_recover_from_snapshot_SnapshotsApi, "/collections/{collection_name}/snapshots/recover", ["api-key", "bearerAuth", ], qdrant_snapshot_recover)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recover from a snapshot

Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.

Params:
- collection_name::String (required)
- wait::Bool
- qdrant_snapshot_recover::QdrantSnapshotRecover

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function recover_from_snapshot(_api::SnapshotsApi, collection_name::String; wait=nothing, qdrant_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_from_snapshot(_api, collection_name; wait=wait, qdrant_snapshot_recover=qdrant_snapshot_recover, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recover_from_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String; wait=nothing, qdrant_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_from_snapshot(_api, collection_name; wait=wait, qdrant_snapshot_recover=qdrant_snapshot_recover, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recover_from_uploaded_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recover_from_uploaded_snapshot(_api::SnapshotsApi, collection_name::String; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_recover_from_uploaded_snapshot_SnapshotsApi, "/collections/{collection_name}/snapshots/upload", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "priority", priority)  # type QdrantSnapshotPriority
    OpenAPI.Clients.set_param(_ctx.file, "snapshot", snapshot)  # type Vector{UInt8}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recover from an uploaded snapshot

Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.

Params:
- collection_name::String (required)
- wait::Bool
- priority::QdrantSnapshotPriority
- snapshot::String

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function recover_from_uploaded_snapshot(_api::SnapshotsApi, collection_name::String; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_from_uploaded_snapshot(_api, collection_name; wait=wait, priority=priority, snapshot=snapshot, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recover_from_uploaded_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_from_uploaded_snapshot(_api, collection_name; wait=wait, priority=priority, snapshot=snapshot, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recover_shard_from_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recover_shard_from_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64; wait=nothing, qdrant_shard_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_recover_shard_from_snapshot_SnapshotsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots/recover", ["api-key", "bearerAuth", ], qdrant_shard_snapshot_recover)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recover from a snapshot

Recover shard of a local collection data from a snapshot. This will overwrite any data, stored in this shard, for the collection.

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- wait::Bool
- qdrant_shard_snapshot_recover::QdrantShardSnapshotRecover

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function recover_shard_from_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64; wait=nothing, qdrant_shard_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_shard_from_snapshot(_api, collection_name, shard_id; wait=wait, qdrant_shard_snapshot_recover=qdrant_shard_snapshot_recover, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recover_shard_from_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String, shard_id::Int64; wait=nothing, qdrant_shard_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_shard_from_snapshot(_api, collection_name, shard_id; wait=wait, qdrant_shard_snapshot_recover=qdrant_shard_snapshot_recover, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recover_shard_from_uploaded_snapshot_SnapshotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recover_shard_from_uploaded_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_recover_shard_from_uploaded_snapshot_SnapshotsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots/upload", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "priority", priority)  # type QdrantSnapshotPriority
    OpenAPI.Clients.set_param(_ctx.file, "snapshot", snapshot)  # type Vector{UInt8}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recover shard from an uploaded snapshot

Recover shard of a local collection from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection shard.

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- wait::Bool
- priority::QdrantSnapshotPriority
- snapshot::String

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function recover_shard_from_uploaded_snapshot(_api::SnapshotsApi, collection_name::String, shard_id::Int64; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_shard_from_uploaded_snapshot(_api, collection_name, shard_id; wait=wait, priority=priority, snapshot=snapshot, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recover_shard_from_uploaded_snapshot(_api::SnapshotsApi, response_stream::Channel, collection_name::String, shard_id::Int64; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_shard_from_uploaded_snapshot(_api, collection_name, shard_id; wait=wait, priority=priority, snapshot=snapshot, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_full_snapshot
export create_shard_snapshot
export create_snapshot
export delete_full_snapshot
export delete_shard_snapshot
export delete_snapshot
export get_full_snapshot
export get_shard_snapshot
export get_snapshot
export list_full_snapshots
export list_shard_snapshots
export list_snapshots
export recover_from_snapshot
export recover_from_uploaded_snapshot
export recover_shard_from_snapshot
export recover_shard_from_uploaded_snapshot
