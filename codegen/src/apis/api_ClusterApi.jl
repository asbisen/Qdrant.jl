# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ClusterApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ClusterApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ClusterApi }) = "http://localhost:6333"

const _returntypes_cluster_status_ClusterApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantClusterStatus200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_cluster_status(_api::ClusterApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_cluster_status_ClusterApi, "/cluster", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get cluster status info

Get information about the current state and composition of the cluster

Params:

Return: QdrantClusterStatus200Response, OpenAPI.Clients.ApiResponse
"""
function cluster_status(_api::ClusterApi; _mediaType=nothing)
    _ctx = _oacinternal_cluster_status(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cluster_status(_api::ClusterApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_cluster_status(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_collection_cluster_info_ClusterApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCollectionClusterInfo200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_collection_cluster_info(_api::ClusterApi, collection_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_collection_cluster_info_ClusterApi, "/collections/{collection_name}/cluster", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Collection cluster info

Get cluster information for a collection

Params:
- collection_name::String (required)

Return: QdrantCollectionClusterInfo200Response, OpenAPI.Clients.ApiResponse
"""
function collection_cluster_info(_api::ClusterApi, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_collection_cluster_info(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function collection_cluster_info(_api::ClusterApi, response_stream::Channel, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_collection_cluster_info(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_shard_key_ClusterApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_create_shard_key(_api::ClusterApi, collection_name::String; timeout=nothing, qdrant_create_sharding_key=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_create_shard_key_ClusterApi, "/collections/{collection_name}/shards", ["api-key", "bearerAuth", ], qdrant_create_sharding_key)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create shard key

Params:
- collection_name::String (required)
- timeout::Int64
- qdrant_create_sharding_key::QdrantCreateShardingKey

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function create_shard_key(_api::ClusterApi, collection_name::String; timeout=nothing, qdrant_create_sharding_key=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_shard_key(_api, collection_name; timeout=timeout, qdrant_create_sharding_key=qdrant_create_sharding_key, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_shard_key(_api::ClusterApi, response_stream::Channel, collection_name::String; timeout=nothing, qdrant_create_sharding_key=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_shard_key(_api, collection_name; timeout=timeout, qdrant_create_sharding_key=qdrant_create_sharding_key, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_shard_key_ClusterApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_shard_key(_api::ClusterApi, collection_name::String; timeout=nothing, qdrant_drop_sharding_key=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_shard_key_ClusterApi, "/collections/{collection_name}/shards/delete", ["api-key", "bearerAuth", ], qdrant_drop_sharding_key)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete shard key

Params:
- collection_name::String (required)
- timeout::Int64
- qdrant_drop_sharding_key::QdrantDropShardingKey

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function delete_shard_key(_api::ClusterApi, collection_name::String; timeout=nothing, qdrant_drop_sharding_key=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_shard_key(_api, collection_name; timeout=timeout, qdrant_drop_sharding_key=qdrant_drop_sharding_key, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_shard_key(_api::ClusterApi, response_stream::Channel, collection_name::String; timeout=nothing, qdrant_drop_sharding_key=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_shard_key(_api, collection_name; timeout=timeout, qdrant_drop_sharding_key=qdrant_drop_sharding_key, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recover_current_peer_ClusterApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recover_current_peer(_api::ClusterApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_recover_current_peer_ClusterApi, "/cluster/recover", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Tries to recover current peer Raft state.

Params:

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function recover_current_peer(_api::ClusterApi; _mediaType=nothing)
    _ctx = _oacinternal_recover_current_peer(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recover_current_peer(_api::ClusterApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_recover_current_peer(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_remove_peer_ClusterApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_remove_peer(_api::ClusterApi, peer_id::Int64; force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_remove_peer_ClusterApi, "/cluster/peer/{peer_id}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "peer_id", peer_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove peer from the cluster

Tries to remove peer from the cluster. Will return an error if peer has shards on it.

Params:
- peer_id::Int64 (required)
- force::Bool

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function remove_peer(_api::ClusterApi, peer_id::Int64; force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_remove_peer(_api, peer_id; force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function remove_peer(_api::ClusterApi, response_stream::Channel, peer_id::Int64; force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_remove_peer(_api, peer_id; force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_collection_cluster_ClusterApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_update_collection_cluster(_api::ClusterApi, collection_name::String; timeout=nothing, qdrant_cluster_operations=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_collection_cluster_ClusterApi, "/collections/{collection_name}/cluster", ["api-key", "bearerAuth", ], qdrant_cluster_operations)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update collection cluster setup

Params:
- collection_name::String (required)
- timeout::Int64
- qdrant_cluster_operations::QdrantClusterOperations

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function update_collection_cluster(_api::ClusterApi, collection_name::String; timeout=nothing, qdrant_cluster_operations=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_collection_cluster(_api, collection_name; timeout=timeout, qdrant_cluster_operations=qdrant_cluster_operations, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_collection_cluster(_api::ClusterApi, response_stream::Channel, collection_name::String; timeout=nothing, qdrant_cluster_operations=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_collection_cluster(_api, collection_name; timeout=timeout, qdrant_cluster_operations=qdrant_cluster_operations, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export cluster_status
export collection_cluster_info
export create_shard_key
export delete_shard_key
export recover_current_peer
export remove_peer
export update_collection_cluster
