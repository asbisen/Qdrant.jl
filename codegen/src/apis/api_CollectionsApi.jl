# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct CollectionsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `CollectionsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ CollectionsApi }) = "http://localhost:6333"

const _returntypes_collection_cluster_info_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCollectionClusterInfo200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_collection_cluster_info(_api::CollectionsApi, collection_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_collection_cluster_info_CollectionsApi, "/collections/{collection_name}/cluster", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Collection cluster info

Get cluster information for a collection

Params:
- collection_name::String (required)

Return: QdrantCollectionClusterInfo200Response, OpenAPI.Clients.ApiResponse
"""
function collection_cluster_info(_api::CollectionsApi, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_collection_cluster_info(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function collection_cluster_info(_api::CollectionsApi, response_stream::Channel, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_collection_cluster_info(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_collection_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_create_collection(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_create_collection=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_create_collection_CollectionsApi, "/collections/{collection_name}", ["api-key", "bearerAuth", ], qdrant_create_collection)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create collection

Create new collection with given parameters

Params:
- collection_name::String (required)
- timeout::Int64
- qdrant_create_collection::QdrantCreateCollection

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function create_collection(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_create_collection=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_collection(_api, collection_name; timeout=timeout, qdrant_create_collection=qdrant_create_collection, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_collection(_api::CollectionsApi, response_stream::Channel, collection_name::String; timeout=nothing, qdrant_create_collection=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_collection(_api, collection_name; timeout=timeout, qdrant_create_collection=qdrant_create_collection, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_field_index_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_create_field_index(_api::CollectionsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_create_field_index=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_create_field_index_CollectionsApi, "/collections/{collection_name}/index", ["api-key", "bearerAuth", ], qdrant_create_field_index)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create index for field in collection

Create index for field in collection

Params:
- collection_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering
- qdrant_create_field_index::QdrantCreateFieldIndex

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function create_field_index(_api::CollectionsApi, collection_name::String; wait=nothing, ordering=nothing, qdrant_create_field_index=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_field_index(_api, collection_name; wait=wait, ordering=ordering, qdrant_create_field_index=qdrant_create_field_index, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_field_index(_api::CollectionsApi, response_stream::Channel, collection_name::String; wait=nothing, ordering=nothing, qdrant_create_field_index=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_field_index(_api, collection_name; wait=wait, ordering=ordering, qdrant_create_field_index=qdrant_create_field_index, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_shard_key_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_create_shard_key(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_create_sharding_key=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_create_shard_key_CollectionsApi, "/collections/{collection_name}/shards", ["api-key", "bearerAuth", ], qdrant_create_sharding_key)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create shard key

Params:
- collection_name::String (required)
- timeout::Int64
- qdrant_create_sharding_key::QdrantCreateShardingKey

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function create_shard_key(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_create_sharding_key=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_shard_key(_api, collection_name; timeout=timeout, qdrant_create_sharding_key=qdrant_create_sharding_key, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_shard_key(_api::CollectionsApi, response_stream::Channel, collection_name::String; timeout=nothing, qdrant_create_sharding_key=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_shard_key(_api, collection_name; timeout=timeout, qdrant_create_sharding_key=qdrant_create_sharding_key, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_shard_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateSnapshot200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_create_shard_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_shard_snapshot_CollectionsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create shard snapshot

Create new snapshot of a shard for a collection

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- wait::Bool

Return: QdrantCreateSnapshot200Response, OpenAPI.Clients.ApiResponse
"""
function create_shard_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_shard_snapshot(_api, collection_name, shard_id; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_shard_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String, shard_id::Int64; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_shard_snapshot(_api, collection_name, shard_id; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateSnapshot200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_create_snapshot(_api::CollectionsApi, collection_name::String; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_snapshot_CollectionsApi, "/collections/{collection_name}/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create collection snapshot

Create new snapshot for a collection

Params:
- collection_name::String (required)
- wait::Bool

Return: QdrantCreateSnapshot200Response, OpenAPI.Clients.ApiResponse
"""
function create_snapshot(_api::CollectionsApi, collection_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_snapshot(_api, collection_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_snapshot(_api, collection_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_collection_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_collection(_api::CollectionsApi, collection_name::String; timeout=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_collection_CollectionsApi, "/collections/{collection_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete collection

Drop collection and all associated data

Params:
- collection_name::String (required)
- timeout::Int64

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function delete_collection(_api::CollectionsApi, collection_name::String; timeout=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_collection(_api, collection_name; timeout=timeout, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_collection(_api::CollectionsApi, response_stream::Channel, collection_name::String; timeout=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_collection(_api, collection_name; timeout=timeout, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_field_index_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateFieldIndex200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_field_index(_api::CollectionsApi, collection_name::String, field_name::String; wait=nothing, ordering=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_field_index_CollectionsApi, "/collections/{collection_name}/index/{field_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "field_name", field_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "ordering", ordering)  # type QdrantWriteOrdering
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete index for field in collection

Delete field index for collection

Params:
- collection_name::String (required)
- field_name::String (required)
- wait::Bool
- ordering::QdrantWriteOrdering

Return: QdrantCreateFieldIndex200Response, OpenAPI.Clients.ApiResponse
"""
function delete_field_index(_api::CollectionsApi, collection_name::String, field_name::String; wait=nothing, ordering=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_field_index(_api, collection_name, field_name; wait=wait, ordering=ordering, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_field_index(_api::CollectionsApi, response_stream::Channel, collection_name::String, field_name::String; wait=nothing, ordering=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_field_index(_api, collection_name, field_name; wait=wait, ordering=ordering, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_shard_key_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_shard_key(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_drop_sharding_key=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_shard_key_CollectionsApi, "/collections/{collection_name}/shards/delete", ["api-key", "bearerAuth", ], qdrant_drop_sharding_key)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete shard key

Params:
- collection_name::String (required)
- timeout::Int64
- qdrant_drop_sharding_key::QdrantDropShardingKey

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function delete_shard_key(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_drop_sharding_key=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_shard_key(_api, collection_name; timeout=timeout, qdrant_drop_sharding_key=qdrant_drop_sharding_key, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_shard_key(_api::CollectionsApi, response_stream::Channel, collection_name::String; timeout=nothing, qdrant_drop_sharding_key=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_shard_key(_api, collection_name; timeout=timeout, qdrant_drop_sharding_key=qdrant_drop_sharding_key, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_shard_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_shard_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_shard_snapshot_CollectionsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete shard snapshot

Delete snapshot of a shard for a collection

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- snapshot_name::String (required)
- wait::Bool

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function delete_shard_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_shard_snapshot(_api, collection_name, shard_id, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_shard_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String, shard_id::Int64, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_shard_snapshot(_api, collection_name, shard_id, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_delete_snapshot(_api::CollectionsApi, collection_name::String, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_snapshot_CollectionsApi, "/collections/{collection_name}/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete collection snapshot

Delete snapshot for a collection

Params:
- collection_name::String (required)
- snapshot_name::String (required)
- wait::Bool

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function delete_snapshot(_api::CollectionsApi, collection_name::String, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_snapshot(_api, collection_name, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String, snapshot_name::String; wait=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_snapshot(_api, collection_name, snapshot_name; wait=wait, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_collection_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantGetCollection200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_collection(_api::CollectionsApi, collection_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_collection_CollectionsApi, "/collections/{collection_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Collection info

Get detailed information about specified existing collection

Params:
- collection_name::String (required)

Return: QdrantGetCollection200Response, OpenAPI.Clients.ApiResponse
"""
function get_collection(_api::CollectionsApi, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_collection(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_collection(_api::CollectionsApi, response_stream::Channel, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_collection(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_collection_aliases_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantGetCollectionAliases200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_collection_aliases(_api::CollectionsApi, collection_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_collection_aliases_CollectionsApi, "/collections/{collection_name}/aliases", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List aliases for collection

Get list of all aliases for a collection

Params:
- collection_name::String (required)

Return: QdrantGetCollectionAliases200Response, OpenAPI.Clients.ApiResponse
"""
function get_collection_aliases(_api::CollectionsApi, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_collection_aliases(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_collection_aliases(_api::CollectionsApi, response_stream::Channel, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_collection_aliases(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_collections_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantGetCollections200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_collections(_api::CollectionsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_collections_CollectionsApi, "/collections", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List collections

Get list name of all existing collections

Params:

Return: QdrantGetCollections200Response, OpenAPI.Clients.ApiResponse
"""
function get_collections(_api::CollectionsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_collections(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_collections(_api::CollectionsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_collections(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_collections_aliases_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantGetCollectionAliases200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_collections_aliases(_api::CollectionsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_collections_aliases_CollectionsApi, "/aliases", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List collections aliases

Get list of all existing collections aliases

Params:

Return: QdrantGetCollectionAliases200Response, OpenAPI.Clients.ApiResponse
"""
function get_collections_aliases(_api::CollectionsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_collections_aliases(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_collections_aliases(_api::CollectionsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_collections_aliases(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_shard_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_shard_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64, snapshot_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_shard_snapshot_CollectionsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/octet-stream", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download collection snapshot

Download specified snapshot of a shard from a collection as a file

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- snapshot_name::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_shard_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_shard_snapshot(_api, collection_name, shard_id, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_shard_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String, shard_id::Int64, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_shard_snapshot(_api, collection_name, shard_id, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_get_snapshot(_api::CollectionsApi, collection_name::String, snapshot_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_snapshot_CollectionsApi, "/collections/{collection_name}/snapshots/{snapshot_name}", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "snapshot_name", snapshot_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/octet-stream", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download collection snapshot

Download specified snapshot from a collection as a file

Params:
- collection_name::String (required)
- snapshot_name::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_snapshot(_api::CollectionsApi, collection_name::String, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_snapshot(_api, collection_name, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String, snapshot_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_snapshot(_api, collection_name, snapshot_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_shard_snapshots_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantListSnapshots200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_list_shard_snapshots(_api::CollectionsApi, collection_name::String, shard_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_shard_snapshots_CollectionsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List shards snapshots for a collection

Get list of snapshots for a shard of a collection

Params:
- collection_name::String (required)
- shard_id::Int64 (required)

Return: QdrantListSnapshots200Response, OpenAPI.Clients.ApiResponse
"""
function list_shard_snapshots(_api::CollectionsApi, collection_name::String, shard_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_shard_snapshots(_api, collection_name, shard_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_shard_snapshots(_api::CollectionsApi, response_stream::Channel, collection_name::String, shard_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_list_shard_snapshots(_api, collection_name, shard_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_snapshots_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantListSnapshots200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_list_snapshots(_api::CollectionsApi, collection_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_snapshots_CollectionsApi, "/collections/{collection_name}/snapshots", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List collection snapshots

Get list of snapshots for a collection

Params:
- collection_name::String (required)

Return: QdrantListSnapshots200Response, OpenAPI.Clients.ApiResponse
"""
function list_snapshots(_api::CollectionsApi, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_list_snapshots(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_snapshots(_api::CollectionsApi, response_stream::Channel, collection_name::String; _mediaType=nothing)
    _ctx = _oacinternal_list_snapshots(_api, collection_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recover_from_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recover_from_snapshot(_api::CollectionsApi, collection_name::String; wait=nothing, qdrant_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_recover_from_snapshot_CollectionsApi, "/collections/{collection_name}/snapshots/recover", ["api-key", "bearerAuth", ], qdrant_snapshot_recover)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recover from a snapshot

Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.

Params:
- collection_name::String (required)
- wait::Bool
- qdrant_snapshot_recover::QdrantSnapshotRecover

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function recover_from_snapshot(_api::CollectionsApi, collection_name::String; wait=nothing, qdrant_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_from_snapshot(_api, collection_name; wait=wait, qdrant_snapshot_recover=qdrant_snapshot_recover, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recover_from_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String; wait=nothing, qdrant_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_from_snapshot(_api, collection_name; wait=wait, qdrant_snapshot_recover=qdrant_snapshot_recover, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recover_from_uploaded_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recover_from_uploaded_snapshot(_api::CollectionsApi, collection_name::String; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_recover_from_uploaded_snapshot_CollectionsApi, "/collections/{collection_name}/snapshots/upload", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "priority", priority)  # type QdrantSnapshotPriority
    OpenAPI.Clients.set_param(_ctx.file, "snapshot", snapshot)  # type Vector{UInt8}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recover from an uploaded snapshot

Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.

Params:
- collection_name::String (required)
- wait::Bool
- priority::QdrantSnapshotPriority
- snapshot::String

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function recover_from_uploaded_snapshot(_api::CollectionsApi, collection_name::String; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_from_uploaded_snapshot(_api, collection_name; wait=wait, priority=priority, snapshot=snapshot, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recover_from_uploaded_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_from_uploaded_snapshot(_api, collection_name; wait=wait, priority=priority, snapshot=snapshot, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recover_shard_from_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recover_shard_from_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64; wait=nothing, qdrant_shard_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_recover_shard_from_snapshot_CollectionsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots/recover", ["api-key", "bearerAuth", ], qdrant_shard_snapshot_recover)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recover from a snapshot

Recover shard of a local collection data from a snapshot. This will overwrite any data, stored in this shard, for the collection.

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- wait::Bool
- qdrant_shard_snapshot_recover::QdrantShardSnapshotRecover

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function recover_shard_from_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64; wait=nothing, qdrant_shard_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_shard_from_snapshot(_api, collection_name, shard_id; wait=wait, qdrant_shard_snapshot_recover=qdrant_shard_snapshot_recover, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recover_shard_from_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String, shard_id::Int64; wait=nothing, qdrant_shard_snapshot_recover=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_shard_from_snapshot(_api, collection_name, shard_id; wait=wait, qdrant_shard_snapshot_recover=qdrant_shard_snapshot_recover, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_recover_shard_from_uploaded_snapshot_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("202", "x"=>".") * "\$") => QdrantRecoverFromUploadedSnapshot202Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_recover_shard_from_uploaded_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_recover_shard_from_uploaded_snapshot_CollectionsApi, "/collections/{collection_name}/shards/{shard_id}/snapshots/upload", ["api-key", "bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "shard_id", shard_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "wait", wait)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "priority", priority)  # type QdrantSnapshotPriority
    OpenAPI.Clients.set_param(_ctx.file, "snapshot", snapshot)  # type Vector{UInt8}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Recover shard from an uploaded snapshot

Recover shard of a local collection from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection shard.

Params:
- collection_name::String (required)
- shard_id::Int64 (required)
- wait::Bool
- priority::QdrantSnapshotPriority
- snapshot::String

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function recover_shard_from_uploaded_snapshot(_api::CollectionsApi, collection_name::String, shard_id::Int64; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_shard_from_uploaded_snapshot(_api, collection_name, shard_id; wait=wait, priority=priority, snapshot=snapshot, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function recover_shard_from_uploaded_snapshot(_api::CollectionsApi, response_stream::Channel, collection_name::String, shard_id::Int64; wait=nothing, priority=nothing, snapshot=nothing, _mediaType=nothing)
    _ctx = _oacinternal_recover_shard_from_uploaded_snapshot(_api, collection_name, shard_id; wait=wait, priority=priority, snapshot=snapshot, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_aliases_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_update_aliases(_api::CollectionsApi; timeout=nothing, qdrant_change_aliases_operation=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_aliases_CollectionsApi, "/collections/aliases", ["api-key", "bearerAuth", ], qdrant_change_aliases_operation)
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update aliases of the collections

Params:
- timeout::Int64
- qdrant_change_aliases_operation::QdrantChangeAliasesOperation

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function update_aliases(_api::CollectionsApi; timeout=nothing, qdrant_change_aliases_operation=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_aliases(_api; timeout=timeout, qdrant_change_aliases_operation=qdrant_change_aliases_operation, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_aliases(_api::CollectionsApi, response_stream::Channel; timeout=nothing, qdrant_change_aliases_operation=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_aliases(_api; timeout=timeout, qdrant_change_aliases_operation=qdrant_change_aliases_operation, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_collection_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_update_collection(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_update_collection=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_collection_CollectionsApi, "/collections/{collection_name}", ["api-key", "bearerAuth", ], qdrant_update_collection)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update collection parameters

Update parameters of the existing collection

Params:
- collection_name::String (required)
- timeout::Int64
- qdrant_update_collection::QdrantUpdateCollection

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function update_collection(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_update_collection=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_collection(_api, collection_name; timeout=timeout, qdrant_update_collection=qdrant_update_collection, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_collection(_api::CollectionsApi, response_stream::Channel, collection_name::String; timeout=nothing, qdrant_update_collection=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_collection(_api, collection_name; timeout=timeout, qdrant_update_collection=qdrant_update_collection, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_collection_cluster_CollectionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => QdrantCreateShardKey200Response,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => QdrantErrorResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => QdrantErrorResponse,
)

function _oacinternal_update_collection_cluster(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_cluster_operations=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_collection_cluster_CollectionsApi, "/collections/{collection_name}/cluster", ["api-key", "bearerAuth", ], qdrant_cluster_operations)
    OpenAPI.Clients.set_param(_ctx.path, "collection_name", collection_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeout", timeout)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update collection cluster setup

Params:
- collection_name::String (required)
- timeout::Int64
- qdrant_cluster_operations::QdrantClusterOperations

Return: QdrantCreateShardKey200Response, OpenAPI.Clients.ApiResponse
"""
function update_collection_cluster(_api::CollectionsApi, collection_name::String; timeout=nothing, qdrant_cluster_operations=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_collection_cluster(_api, collection_name; timeout=timeout, qdrant_cluster_operations=qdrant_cluster_operations, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_collection_cluster(_api::CollectionsApi, response_stream::Channel, collection_name::String; timeout=nothing, qdrant_cluster_operations=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_collection_cluster(_api, collection_name; timeout=timeout, qdrant_cluster_operations=qdrant_cluster_operations, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export collection_cluster_info
export create_collection
export create_field_index
export create_shard_key
export create_shard_snapshot
export create_snapshot
export delete_collection
export delete_field_index
export delete_shard_key
export delete_shard_snapshot
export delete_snapshot
export get_collection
export get_collection_aliases
export get_collections
export get_collections_aliases
export get_shard_snapshot
export get_snapshot
export list_shard_snapshots
export list_snapshots
export recover_from_snapshot
export recover_from_uploaded_snapshot
export recover_shard_from_snapshot
export recover_shard_from_uploaded_snapshot
export update_aliases
export update_collection
export update_collection_cluster
